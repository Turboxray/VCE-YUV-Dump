#[1]   vce_dump.asm
   48                     
   49                     ;..................................................
   50                     ;                                                 .
   51                     ;  Logical Memory Map:                            .
   52                     ;                                                 .
   53                     ;            $0000 = Hardware bank                .
   54                     ;            $2000 = Sys Ram                      .
   55                     ;            $4000 = Subcode                      .
   56                     ;            $6000 = Data 0 / Cont. of Subcode    .
   57                     ;            $8000 = Data 1                       .
   58                     ;            $A000 = Data 2                       .
   59                     ;            $C000 = Main                         .
   60                     ;            $E000 = Fixed Libray                 .
   61                     ;                                                 .
   62                     ;..................................................
   63                     
   64                     
   65                     ;/////////////////////////////////////////////////////////////////////////////////
   66                     ;/////////////////////////////////////////////////////////////////////////////////
   67                     ;/////////////////////////////////////////////////////////////////////////////////
   68                     ;
   69                     ;//  Vars
   70                     
#[2]   ../base_func/vars.inc
   71                         .include "../base_func/vars.inc"
    1                     
    2                     
    3           2000          .zp
    4                     
    5  --:2000                    R0:        .ds 2
    6  --:2002                    R1:        .ds 2
    7  --:2004                    R2:        .ds 2
    8  --:2006                    R3:        .ds 2
    9  --:2008                    R4:        .ds 2
   10  --:200A                    R5:        .ds 2
   11  --:200C                    R6:        .ds 2
   12  --:200E                    R7:        .ds 2
   13  --:2010                    R8:        .ds 2
   14  --:2012                    A0:        .ds 2
   15  --:2014                    A1:        .ds 2
   16  --:2016                    A2:        .ds 2
   17  --:2018                    A3:        .ds 2
   18  --:201A                    A4:        .ds 2
   19  --:201C                    A5:        .ds 2
   20  --:201E                    A6:        .ds 2
   21  --:2020                    A7:        .ds 2
   22  --:2022                    A8:        .ds 2
   23  --:2024                    D0:        .ds 2
   24  --:2026                    D1:        .ds 2
   25  --:2028                    D2:        .ds 2
   26  --:202A                    D3:        .ds 2
   27  --:202C                    D4:        .ds 2
   28  --:202E                    D5:        .ds 2
   29  --:2030                    D6:        .ds 2
   30  --:2032                    D7:        .ds 2
   31  --:2034                    D8:        .ds 2
   32  --:2036                    M0:        .ds 1      ;MPR 2
   33  --:2037                    M1:        .ds 1      ;MPR 3
   34  --:2038                    M2:        .ds 1      ;MPR 4
   35  --:2039                    M3:        .ds 1      ;MPR 5
   36  --:203A                    M4:        .ds 1      ;MPR 6
   37  --:203B                    M5:        .ds 1      ;MPR 7
   38                     
   39  --:203C                    EAX0:      .ds 4
   40  --:2040                    EAX1:      .ds 4
   41  --:2044                    EAX2:      .ds 4
   42  --:2048                    EAX3:      .ds 4
   43                     
   44           2200          .bss
   45                     
   46  --:2200                    pal_color0: .ds 1
   47  --:2201                    pal_color1: .ds 1
   48                     
   49           2012      A0.l  .equ  A0
   50           2013      A0.h  .equ  A0+1
   51           2014      A1.l  .equ  A1
   52           2015      A1.h  .equ  A1+1
   53           2016      A2.l  .equ  A2
   54           2017      A2.h  .equ  A2+1
   55           2018      A3.l  .equ  A3
   56           2019      A3.h  .equ  A3+1
   57           201A      A4.l  .equ  A4
   58           201B      A4.h  .equ  A4+1
   59           201C      A5.l  .equ  A5
   60           201D      A5.h  .equ  A5+1
   61           201E      A6.l  .equ  A6
   62           201F      A6.h  .equ  A6+1
   63           2020      A7.l  .equ  A7
   64           2021      A7.h  .equ  A7+1
   65                     
   66           2024      D0.l  .equ  D0
   67           2025      D0.h  .equ  D0+1
   68           2026      D1.l  .equ  D1
   69           2027      D1.h  .equ  D1+1
   70           2028      D2.l  .equ  D2
   71           2029      D2.h  .equ  D2+1
   72           202A      D3.l  .equ  D3
   73           202B      D3.h  .equ  D3+1
   74           202C      D4.l  .equ  D4
   75           202D      D4.h  .equ  D4+1
   76           202E      D5.l  .equ  D5
   77           202F      D5.h  .equ  D5+1
   78           2030      D6.l  .equ  D6
   79           2031      D6.h  .equ  D6+1
   80           2032      D7.l  .equ  D7
   81           2033      D7.h  .equ  D7+1
   82                     
   83           2000      R0.l  .equ  R0
   84           2001      R0.h  .equ  R0+1
   85           2002      R1.l  .equ  R1
   86           2003      R1.h  .equ  R1+1
   87           2004      R2.l  .equ  R2
   88           2005      R2.h  .equ  R2+1
   89           2006      R3.l  .equ  R3
   90           2007      R3.h  .equ  R3+1
   91           2008      R4.l  .equ  R4
   92           2009      R4.h  .equ  R4+1
   93           200A      R5.l  .equ  R5
   94           200B      R5.h  .equ  R5+1
   95           200C      R6.l  .equ  R6
   96           200D      R6.h  .equ  R6+1
   97           200E      R7.l  .equ  R7
   98           200F      R7.h  .equ  R7+1
   99                     
  100           203C      EAX0.l = EAX0
  101           203D      EAX0.m = EAX0+1
  102           203E      EAX0.h = EAX0+2
  103           203F      EAX0.u = EAX0+3
  104                     
  105           2040      EAX1.l = EAX1
  106           2041      EAX1.m = EAX1+1
  107           2042      EAX1.h = EAX1+2
  108           2043      EAX1.u = EAX1+3
  109                     
  110           2044      EAX2.l = EAX2
  111           2045      EAX2.m = EAX2+1
  112           2046      EAX2.h = EAX2+2
  113           2047      EAX2.u = EAX2+3
  114                     
  115           2048      EAX3.l = EAX3
  116           2049      EAX3.m = EAX3+1
  117           204A      EAX3.h = EAX3+2
  118           204B      EAX3.u = EAX3+3
  119                     
#[1]   vce_dump.asm
#[2]   ../base_func/video/vdc/vars.inc
   72                         .include "../base_func/video/vdc/vars.inc"
    1                     
    2           2202          .bss
    3                     
    4  --:2202                    __vblank:       .ds 1
    5                     
    6           204C          .zp
    7                     
    8  --:204C                    vdc_reg:        .ds 1
    9  --:204D                    vdc_status:     .ds 1
#[1]   vce_dump.asm
#[2]   ../base_func/video/vdc/sprites/vars.inc
   73                         .include "../base_func/video/vdc/sprites/vars.inc"
    1                     ;//.......................................................
    2                     ;                                                        .
    3                     ;   Sprite structures in memory                          .
    4                     ;                                                        .
    5                     ;                                                        .
    6                     ;.........................................................
    7                     
#[3]   ../base_func/video/vdc/sprites/equ.inc
    8                         .include "../base_func/video/vdc/sprites/equ.inc"
    1           0060      SpriteGroupSize = 64 + 32
    2                     
    3                     ;sprite attributes
    4           8000      V_FLIP     = %1000000000000000
    5           0800      H_FLIP     = %0000100000000000
    6           0000      NO_V_FLIP  = %0000000000000000
    7           0000      NO_H_FLIP  = %0000000000000000
    8           7FFF      INV_V_FLIP = %0111111111111111
    9           F7FF      INV_H_FLIP = %1111011111111111
   10           0000      SIZE16_16  = %0000000000000000
   11           1000      SIZE16_32  = %0001000000000000
   12           3000      SIZE16_64  = %0011000000000000
   13           0100      SIZE32_16  = %0000000100000000
   14           1100      SIZE32_32  = %0001000100000000
   15           3100      SIZE32_64  = %0011000100000000
   16           0000      PRIOR_L    = %0000000000000000
   17           0080      PRIOR_H    = %0000000010000000
   18           0000      SPAL0      = %0000000000000000
   19           0001      SPAL1      = %0000000000000001
   20           0002      SPAL2      = %0000000000000010
   21           0003      SPAL3      = %0000000000000011
   22           0004      SPAL4      = %0000000000000100
   23           0005      SPAL5      = %0000000000000101
   24           0006      SPAL6      = %0000000000000110
   25           0007      SPAL7      = %0000000000000111
   26           0008      SPAL8      = %0000000000001000
   27           0009      SPAL9      = %0000000000001001
   28           000A      SPAL10     = %0000000000001010
   29           000B      SPAL11     = %0000000000001011
   30           000C      SPAL12     = %0000000000001100
   31           000D      SPAL13     = %0000000000001101
   32           000E      SPAL14     = %0000000000001110
   33           000F      SPAL15     = %0000000000001111
   34                     
#[2]   ../base_func/video/vdc/sprites/vars.inc
    9           2203          .bss
   10                     
   11                         ;..................................................
   12                     
   13  --:2203                cell.Y.lo:                      .ds SpriteGroupSize
   14  --:2263                cell.Y.hi:                      .ds SpriteGroupSize
   15                     
   16  --:22C3                cell.X.lo:                      .ds SpriteGroupSize
   17  --:2323                cell.X.hi:                      .ds SpriteGroupSize
   18                     
   19  --:2383                cell.attribs.lo:                .ds SpriteGroupSize
   20  --:23E3                cell.attribs.hi:                .ds SpriteGroupSize
   21                     
   22  --:2443                cell.pattern.lo:                .ds SpriteGroupSize
   23  --:24A3                cell.pattern.hi:                .ds SpriteGroupSize
   24                     
   25  --:2503                SATB.vramAddr:                  .ds 2
   26                     
   27  --:2505                SATB.openslot:                  .ds 1
   28                     
   29  --:2506                SATB.openslot.hpriority:       .ds 1
#[1]   vce_dump.asm
#[2]   ../base_func/IO/irq_controller/vars.inc
   74                         .include "../base_func/IO/irq_controller/vars.inc"
    1                     
    2           204E          .zp
    3                     
    4  --:204E                    vector_mask:    .ds 1
    5                     
    6                     
    7  --:204F                    vdc_vect:       .ds 2
    8  --:2051                    brk_vect:       .ds 2
    9  --:2053                    timer_vect:     .ds 2
   10  --:2055                    vdc_vsync:      .ds 2
   11  --:2057                    vdc_hsync:      .ds 2
   12                     
   13           204F      irq_vector_list = vdc_vect
#[1]   vce_dump.asm
#[2]   ../base_func/audio/wsg/vars.inc
   75                         .include "../base_func/audio/wsg/vars.inc"
#[1]   vce_dump.asm
#[2]   ../base_func/IO/gamepad/vars.inc
   76                         .include "../base_func/IO/gamepad/vars.inc"
    1                     
    2                     
    3           2507          .bss
    4                     
    5                             ;//The current button state.
    6                     
    7  --:2507                    b1_status:  .ds 1
    8  --:2508                    b2_status:  .ds 1
    9  --:2509                    sl_status:  .ds 1
   10  --:250A                    st_status:  .ds 1
   11  --:250B                    up_status:  .ds 1
   12  --:250C                    dn_status:  .ds 1
   13  --:250D                    lf_status:  .ds 1
   14  --:250E                    rh_status:  .ds 1
#[1]   vce_dump.asm
   77                     
   78                     
#[2]   ../lib/controls/vars.inc
   79                         .include "../lib/controls/vars.inc"
    1                     
    2                     
    3           250F        .bss
    4                     
    5                                                     ; The amount of time between the button physically pressed and registered as pressed.
    6  --:250F                    b1_delay:      .ds 1
    7  --:2510                    b2_delay:      .ds 1
    8  --:2511                    sl_delay:      .ds 1
    9  --:2512                    st_delay:      .ds 1
   10  --:2513                    up_delay:      .ds 1
   11  --:2514                    dn_delay:      .ds 1
   12  --:2515                    lf_delay:      .ds 1
   13  --:2516                    rh_delay:      .ds 1
   14                     
   15  --:2517                    b1_counter:    .ds 1
   16  --:2518                    b2_counter:    .ds 1
   17  --:2519                    sl_counter:    .ds 1
   18  --:251A                    st_counter:    .ds 1
   19  --:251B                    up_counter:    .ds 1
   20  --:251C                    dn_counter:    .ds 1
   21  --:251D                    lf_counter:    .ds 1
   22  --:251E                    rh_counter:    .ds 1
   23                     
   24                                                     ; The transition state of each button; [null, just pressed, held, just released]
   25  --:251F                    input_state:   .ds 2
#[1]   vce_dump.asm
#[2]   ../lib/HsyncISR/vars.inc
   80                         .include "../lib/HsyncISR/vars.inc"
    1                     
    2                     
    3           2059          .zp
    4                     
    5  --:2059                RCRline:                .ds 2
    6  --:205B                line.indx:              .ds 2
    7  --:205D                line.reload:            .ds 1
    8                     
    9           2521          .bss
   10                     
   11  --:2521                _BXR:                   .ds 2
   12  --:2523                _BYR:                   .ds 2
   13                     
   14                     
   15                     
   16  --:2525                line.lo:                .ds 150
   17  --:25BB                line.hi:                .ds 150
   18                     
   19  --:2651                line.delta.lo:          .ds 150
   20  --:26E7                line.delta.hi:          .ds 150
   21                     
   22                     
   23                     
   24                     
#[1]   vce_dump.asm
#[2]   ../lib/control_vars/vars.inc
   81                         .include "../lib/control_vars/vars.inc"
    1                     
#[1]   vce_dump.asm
#[2]   ../lib/random/16bit/vars.inc
   82                         .include "../lib/random/16bit/vars.inc"
    1                     
    2                     
    3                     
    4           277D        .bss
    5                     
    6  --:277D              random.RNG:   .ds 2
    7                     
    8                     
    9           277D      random.RNG.lo = random.RNG
   10           277E      random.RNG.hi = random.RNG + 1
   11                     
#[1]   vce_dump.asm
   83                     
#[2]   ../general/vars.inc
   84                         .include "../general/vars.inc"
    1                     
    2                     
    3                     
    4           277F          .bss
    5                     
    6  --:277F                    cramArray:      .ds 512*2
    7                     
    8  --:2B7F                    row:            .ds 1
    9  --:2B80                    col:            .ds 1
   10                     
   11  --:2B81                    cntr0:          .ds 1
   12  --:2B82                    cntr1:          .ds 1
   13                     
   14  --:2B83                    colorSelect:    .ds 2
#[1]   vce_dump.asm
   85                     
   86                     ;....................................
   87           E000          .code
   88                     
   89           0000          .bank $00, "Fixed Lib/Start up"
   90           E000          .org $e000
   91                     ;....................................
   92                     
   93                     ;/////////////////////////////////////////////////////////////////////////////////
   94                     ;/////////////////////////////////////////////////////////////////////////////////
   95                     ;/////////////////////////////////////////////////////////////////////////////////
   96                     ;
   97                     ;// Support files: equates and macros
   98                     
#[2]   ../base_func/base.inc
   99                         .include "../base_func/base.inc"
    1                     
    2                     
#[3]   ../base_func/equ.inc
    3                     include "../base_func/equ.inc"
    1                     
    2                     ; Txx
    3           00D3      in_DMA = $D3
    4           00E3      ia_DMA = $E3
    5           0073      ii_DMA = $73
    6           00C3      dd_DMA = $C3
    7           00F3      ai_DMA = $F3
    8                     
    9                     ; MPR slots
   10           0000      MPR0 = 0
   11           0001      MPR1 = 1
   12           0002      MPR2 = 2
   13           0003      MPR3 = 3
   14           0004      MPR4 = 4
   15           0005      MPR5 = 5
   16           0006      MPR6 = 6
   17           0007      MPR7 = 7
   18                     
   19                     
   20           0001      AX = $ffff0001
   21           0002      AY = $ffff0002
   22           0003      XY = $ffff0003
   23           0003      AXY = $ffff0003
   24                     
#[2]   ../base_func/base.inc
    4                     
    5                     ;................................................
    6                     INC_BIT .macro
    7                     
    8                         lda \1
    9                         inc a
   10                         and #$01
   11                         sta \1
   12                     
   13                         .endm
   14                     
   15                     ;................................................
   16                     CallFar    .macro
   17                                     tma #page(\1)
   18                                     pha
   19                     
   20                                     lda #bank(\1)
   21                                     tam #page(\1)
   22                                     jsr \1
   23                     
   24                                     pla
   25                                     tam #page(\1)
   26                     
   27                         .endm
   28                     
   29                     ;................................................
   30                     CallFar.AXY    .macro
   31                                     sta <R0
   32                                     tma #page(\1)
   33                                     pha
   34                     
   35                                     lda #bank(\1)
   36                                     tam #page(\1)
   37                                     lda <R0
   38                                     pha
   39                                     phx
   40                                     phy
   41                                     jsr \1
   42                     
   43                                     pla
   44                                     tam #page(\1)
   45                     
   46                         .endm
   47                     
   48                     CallFarDoubleBank    .macro
   49                                     tma #page(\1)
   50                                     pha
   51                                     tma #page(\1) + 1
   52                                     pha
   53                     
   54                                     lda #bank(\1)
   55                                     tam #page(\1)
   56                                     inc a
   57                                     tam #page(\1) + 1
   58                                     jsr \1
   59                     
   60                                     pla
   61                                     tam #page(\1) + 1
   62                                     pla
   63                                     tam #page(\1)
   64                     
   65                         .endm
   66                     
   67                     CallFarWide    .macro
   68                                     tma #page(\1)
   69                                     pha
   70                                     tma #page(\1) + 1
   71                                     pha
   72                     
   73                                     lda #bank(\1)
   74                                     tam #page(\1)
   75                                     inc a
   76                                     tam #page(\1) + 1
   77                                     jsr \1
   78                     
   79                                     pla
   80                                     tam #page(\1) + 1
   81                                     pla
   82                                     tam #page(\1)
   83                     
   84                         .endm
   85                     
   86                     
   87                     ;................................................
   88                     CLEAR.REG .macro
   89                     
   90                         cla
   91                         cly
   92                         clx
   93                     
   94                         .endm
   95                     
   96                     ;................................................
   97                     PUSH.all .macro
   98                     
   99                         pha
  100                         phy
  101                         phx
  102                     
  103                         .endm
  104                     
  105                     ;................................................
  106                     PULL.all .macro
  107                     
  108                         plx
  109                         ply
  110                         pla
  111                     
  112                         .endm
  113                     
  114                     
  115                     ;................................................
  116                     PUSH.addr .macro
  117                     
  118                         lda #>(\1 - 1)
  119                         pha
  120                         lda #<(\1 - 1)
  121                         pha
  122                     
  123                         .endm
  124                     
  125                     ;................................................
  126                     jsr.ind .macro
  127                         PUSH.addr .return_\@
  128                             jmp [\1]
  129                     .return_\@
  130                       .endm
  131                     
  132                     ;................................................
  133                     jsr.ind.x .macro
  134                         PUSH.addr .return_\@
  135                             jmp [\1,x]
  136                     .return_\@
  137                       .endm
  138                     
  139                     ;................................................
  140                     Interrupts.disable  .macro
  141                         sei
  142                       .endm
  143                     
  144                     ;................................................
  145                     Interrupts.enable  .macro
  146                         cli
  147                       .endm
  148                     
  149                     
  150                     ;................................................
  151                     MAP_BANK        .macro                ;8k
  152                     
  153                         .if (\?1=2)
  154                         lda #bank(\1)
  155                         tam #(\2)
  156                         .endif
  157                     
  158                         .if (\?1=3)
  159                         lda \1
  160                         tam #(\2)
  161                         .endif
  162                     
  163                         .if (\?1=6)
  164                         lda \1
  165                         tam #(\2)
  166                         .endif
  167                     
  168                         .if (\?1=1)
  169                         tam #(\2)
  170                         .endif
  171                     
  172                         .endm
  173                     
  174                     MAP_BANK.2        .macro        ;16k
  175                     
  176                         .if (\?1=2)
  177                         lda #bank(\1)
  178                         tam #(\2)
  179                         inc a
  180                         tam #(\2 + 1)
  181                         .endif
  182                     
  183                         .if (\?1=3)
  184                         lda \1
  185                         tam #(\2)
  186                         inc a
  187                         tam #(\2 + 1)
  188                         .endif
  189                     
  190                         .if (\?1=6)
  191                         lda \1
  192                         tam #(\2)
  193                         inc a
  194                         tam #(\2 + 1)
  195                         .endif
  196                     
  197                         .if (\?1=1)
  198                         tam #(\2)
  199                         inc a
  200                         tam #(\2 + 1)
  201                         .endif
  202                     
  203                         .endm
  204                     
  205                     MAP_BANK.3        .macro        ;24k
  206                     
  207                         lda #bank(\1)
  208                         tam #(\2)
  209                         inc a
  210                         tam #(\2 + 1)
  211                         inc a
  212                         tam #(\2 + 2)
  213                     
  214                         .endm
  215                     
  216                     MAP_BANK.4        .macro    ;32k
  217                     
  218                         lda #bank(\1)
  219                         tam #(\2)
  220                         inc a
  221                         tam #(\2 + 1)
  222                         inc a
  223                         tam #(\2 + 2)
  224                         inc a
  225                         tam #(\2 + 3)
  226                     
  227                         .endm
  228                     
  229                     
  230                     ;................................................
  231                     LEA        .macro
  232                     
  233                         lda #low(\1)
  234                         sta <(\3)
  235                         lda #high((\1 & $1fff)+ \2)
  236                         sta <(\3 + 1)
  237                     
  238                         .endm
  239                     
  240                     LEA.l            .macro
  241                     
  242                         if (\3 = AXY)
  243                             lda #low(\1)
  244                             ldx #high((\1 & $1fff)+ \2)
  245                             ldy #bank(\1)
  246                         .else
  247                             lda #low(\1)
  248                             sta (\3)
  249                             lda #high((\1 & $1fff)+ \2)
  250                             sta (\3 + 1)
  251                             lda #bank(\1)
  252                             sta (\3 + 2)
  253                         .endif
  254                         .endm
  255                     
  256                     
  257                     LEB            .macro
  258                     
  259                         lda #bank(\1)
  260                         sta (\2)
  261                     
  262                         .endm
  263                     
  264                     
  265                     ;................................................
  266                     INC.w        .macro
  267                                 inc \1
  268                                 bne .x_\@
  269                                 inc \1 + 1
  270                     .x_\@
  271                         .endm
  272                     
  273                     ;................................................
  274                     DEC.w        .macro
  275                                 lda \1
  276                                 sec
  277                                 sbc #$01
  278                                 sta \1
  279                                 lda \1 + 1
  280                                 sbc #$00
  281                                 sta \1 + 1
  282                         .endm
  283                     
  284                     ;//................................................
  285                     ;// MOVE macros
  286                     
  287                     ;......................
  288                     ; MOVE.byte source, destination
  289                     MOVE.b    .macro
  290                         .if (\#=0)
  291                         .fail Macro requires two arguments
  292                         .endif
  293                     
  294                         .if (\#=1)
  295                         .fail Macro requires two arguments
  296                         .endif
  297                     
  298                         .if (\#>2)
  299                         .fail Macro requires two arguments
  300                         .endif
  301                     
  302                     
  303                         .if (\?1=2)
  304                         lda \1
  305                         sta \2
  306                         .endif
  307                     
  308                         .if (\?1=3)
  309                         lda \1
  310                         sta \2
  311                         .endif
  312                     
  313                         .if (\?1=4)
  314                         lda \1
  315                         sta \2
  316                         .endif
  317                     
  318                         .if (\?1=6)
  319                         lda \1
  320                         sta \2
  321                         .endif
  322                     
  323                     ;    .if (\?1=5)
  324                     ;        .if (\5='Acc')
  325                     ;        sta \2
  326                     ;        .endif
  327                     ;        .if (\5='IX')
  328                     ;        stx \2
  329                     ;        .endif
  330                     ;        .if (\5='IY')
  331                     ;        sty \2
  332                     ;        .endif
  333                     ;    .endif
  334                     
  335                         .endm
  336                     
  337                     ;......................
  338                     ; MOVE.byte source, destination
  339                     MOVE.b.w    .macro
  340                         .if (\#=0)
  341                         .fail Macro requires two arguments
  342                         .endif
  343                     
  344                         .if (\#=1)
  345                         .fail Macro requires two arguments
  346                         .endif
  347                     
  348                         .if (\#>2)
  349                         .fail Macro requires two arguments
  350                         .endif
  351                     
  352                         .if (\?2=2)
  353                         .fail destination cannot be an immediate
  354                         .endif
  355                     
  356                         .if (\?2=1)
  357                         .fail destination cannot be a huc6280 register
  358                         .endif
  359                     
  360                         .if (\?2=5)
  361                         .fail destination cannot be a 'string'
  362                         .endif
  363                     
  364                     
  365                         .if (\?2=3)
  366                                 lda \1
  367                                 sta \2
  368                                 lda #$00
  369                                 sta \2 + 1
  370                         .endif
  371                     
  372                         .if (\?2=4)
  373                                 lda \1
  374                                 sta \2
  375                                 lda #$00
  376                                 ldy #$01
  377                                 sta \2,y
  378                         .endif
  379                     
  380                         .if (\?2=6)
  381                                 lda \1
  382                                 sta \2
  383                                 lda #$00
  384                                 sta \2 + 1
  385                         .endif
  386                     
  387                     
  388                         .endm
  389                     
  390                     
  391                     ;......................
  392                     ; MOVE.byte source, destination
  393                     MOVEA.b    .macro
  394                         ;.fail \?1
  395                         .if (\#=0)
  396                         .fail Macro requires one arguments
  397                         .endif
  398                     
  399                     
  400                         .if (\#>1)
  401                         .fail Macro requires one arguments
  402                         .endif
  403                     
  404                     
  405                         .if (\?1=1)
  406                         .fail Cannot use A,X, or Y registers as source
  407                         .endif
  408                     
  409                         ;source=#
  410                         .if (\?1=2)
  411                         lda #low(\1)
  412                         .endif
  413                     
  414                         ;source=full ADDR
  415                         .if (\?1=3)
  416                         lda \1
  417                         .endif
  418                     
  419                         ;source=indirect
  420                         .if (\?1=4)
  421                         lda \1
  422                         .endif
  423                     
  424                         ;source=string
  425                         .if (\?1=5)
  426                         .fail Cant use strings as arguments.
  427                         .endif
  428                     
  429                         ;source=label as direct address
  430                         .if (\?1=6)
  431                         lda \1
  432                         .endif
  433                     
  434                     
  435                         .endm
  436                     
  437                     ;......................
  438                     ; MOVE.word source, destination
  439                     MOVE.w    .macro
  440                         ;.fail \?1
  441                         .if (\#=0)
  442                         .fail Macro requires two arguments
  443                         .endif
  444                     
  445                         .if (\#=1)
  446                         .fail Macro requires two arguments
  447                         .endif
  448                     
  449                         .if (\#>2)
  450                         .fail Macro requires two arguments
  451                         .endif
  452                     
  453                     
  454                         .if (\?1=1)
  455                         .fail Cannot use A,X, or Y registers as source
  456                         .endif
  457                     
  458                         ;source=#
  459                         .if (\?1=2 & \2 != AX)
  460                         lda #low(\1)
  461                         sta \2
  462                         lda #high(\1)
  463                         sta \2 + 1
  464                         .endif
  465                     
  466                         .if (\2 = AX & \?1 = 2)
  467                         ldx #low(\1)
  468                         lda #high(\1)
  469                         .endif
  470                     
  471                         .if (\2 = AX & (\?1 = 3 | \?1 = 6))
  472                         ldx \1
  473                         lda \1 + 1
  474                         .endif
  475                     
  476                         .if (\2 = AY & \?1 = 2)
  477                         ldy #low(\1)
  478                         lda #high(\1)
  479                         .endif
  480                     
  481                         .if (\2 = AY & (\?1 = 3 | \?1 = 6))
  482                         ldy \1
  483                         lda \1 + 1
  484                         .endif
  485                     
  486                         .if (\2 = XY & \?1 = 2)
  487                         ldy #low(\1)
  488                         ldx #high(\1)
  489                         .endif
  490                     
  491                         .if (\2 = XY & (\?1 = 3 | \?1 = 6))
  492                         ldy \1
  493                         ldx \1 + 1
  494                         .endif
  495                     
  496                     
  497                         ;source=full ADDR
  498                         .if (\?1=3 & \2 != AX )
  499                         lda \1
  500                         sta \2
  501                         lda \1 + 1
  502                         sta \2 + 1
  503                         .endif
  504                     
  505                         ;source=indirect
  506                         .if (\?1=4 & \2 != AX )
  507                         lda \1
  508                         sta \2
  509                         phy
  510                         ldy #$01
  511                         lda \1,y
  512                         ply
  513                         sta \2 + 1
  514                         .endif
  515                     
  516                         ;source=string
  517                         .if (\?1=5)
  518                         .fail Cant use strings as arguments.
  519                         .endif
  520                     
  521                         ;source=label as direct address
  522                         .if (\?1=6 & \2 != AX )
  523                         lda \1
  524                         sta \2
  525                         lda \1 + 1
  526                         sta \2 + 1
  527                         .endif
  528                     
  529                     
  530                         .endm
  531                     
  532                     ;......................
  533                     ; MOVE.word source, destination
  534                     MOVE.w.add    .macro
  535                     
  536                         .if (\#<3)
  537                         .fail Macro requires three arguments
  538                         .endif
  539                     
  540                         .if (\#>3)
  541                         .fail Macro requires three arguments
  542                         .endif
  543                     
  544                     
  545                         .if (\?1=1)
  546                         .fail Cannot use A,X, or Y registers as source
  547                         .endif
  548                     
  549                         ;source=#
  550                         .if (\?1=2)
  551                         lda #low(\1+\3)
  552                         sta \2
  553                         lda #high(\1+\3)
  554                         sta \2 + 1
  555                         .endif
  556                     
  557                         ;source=full ADDR
  558                         .if (\?1=3)
  559                         lda \1
  560                         clc
  561                         adc #low(\3)
  562                         sta \2
  563                         lda \1 + 1
  564                         adc #high(\3)
  565                         sta \2 + 1
  566                         .endif
  567                     
  568                         ;source=indirect
  569                         .if (\?1=4)
  570                         lda \1
  571                         clc
  572                         adc #low(\3)
  573                         sta \2
  574                         phy
  575                         ldy #$01
  576                         lda \1,y
  577                         adc #high(\3)
  578                         ply
  579                         sta \2 + 1
  580                         .endif
  581                     
  582                         ;source=string
  583                         .if (\?1=5)
  584                         .fail Cant use strings as arguments.
  585                         .endif
  586                     
  587                         ;source=label as direct address
  588                         .if (\?1=6)
  589                         lda \1
  590                         clc
  591                         adc #low(\3)
  592                         sta \2
  593                         lda \1 + 1
  594                         adc #high(\3)
  595                         sta \2 + 1
  596                         .endif
  597                     
  598                     
  599                         .endm
  600                     
  601                     
  602                     ;......................
  603                     ; MOVE.X.byte source, destination
  604                     MOVE.X.b    .macro
  605                         ldx \1
  606                         sta \2
  607                         .endm
  608                     
  609                     ;......................
  610                     ; MOVE.Y.byte source, destination
  611                     MOVE.Y.b    .macro
  612                         ldy \1
  613                         sta \2
  614                         .endm
  615                     
  616                     ;......................
  617                     ; MOVE.IY.byte source, destination
  618                     MOVE.IY.b    .macro
  619                         lda \1
  620                         sta \2
  621                         iny
  622                         .endm
  623                     
  624                     ;......................
  625                     ; MOVE.IY.byte source, destination
  626                     MOVE.DY.b    .macro
  627                         lda \1
  628                         sta \2
  629                         dey
  630                         .endm
  631                     
  632                     ;......................
  633                     ; MOVE.AX A:X, destination
  634                     MOVE.AX    .macro
  635                         sta \1
  636                         stx \1 + 1
  637                     
  638                         .endm
  639                     
  640                     ;......................
  641                     ; MOVE.AY A:Y, destination
  642                     MOVE.AY    .macro
  643                         sta \1
  644                         sty \1 + 1
  645                     
  646                         .endm
  647                     
  648                     ;......................
  649                     ; MOVE.XY X:Y, destination
  650                     MOVE.XY    .macro
  651                         stx \1
  652                         sty \1 + 1
  653                     
  654                         .endm
  655                     
  656                     
  657                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  658                     ;//..............................................
  659                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  660                     ;// Old move macros
  661                     MOVE.r        .macro
  662                             lda (\1)
  663                             sta <(\2)
  664                             lda (\1 + 1)
  665                             sta <(\2 + 1)
  666                         .endm
  667                     
  668                     MOVE.r.l        .macro
  669                             lda \1
  670                             sta \2
  671                             lda \1 + 1
  672                             sta \2 + 1
  673                             lda \1 + 2
  674                             sta \2 + 2
  675                         .endm
  676                     
  677                     ; MOVE.b        .macro
  678                     ;     .if (\?1=4)
  679                     
  680                     ;         lda \1
  681                     ;         sta \2
  682                     ;     .endif
  683                     
  684                     ;     .if (\?1=3)
  685                     ;         lda \1
  686                     ;         sta \2
  687                     ;     .endif
  688                     
  689                     ;     .if (\?1=2)
  690                     ;         lda \1
  691                     ;         sta \2
  692                     ;     .endif
  693                     
  694                     ;     .if (\?1=6)
  695                     ;         lda \1
  696                     ;         sta \2
  697                     ;     .endif
  698                     
  699                     ;     .endm
  700                     
  701                     MOVE.Rx.b        .macro
  702                         .if (\?1=4)
  703                     
  704                             ldx \1
  705                             stx \2
  706                         .endif
  707                     
  708                         .if (\?1=3)
  709                             ldx \1
  710                             stx \2
  711                         .endif
  712                     
  713                         .if (\?1=2)
  714                             ldx \1
  715                             stx \2
  716                         .endif
  717                     
  718                         .if (\?1=6)
  719                             ldx \1
  720                             stx \2
  721                         .endif
  722                     
  723                         .if (\?1=1)
  724                             stx \2
  725                         .endif
  726                     
  727                     
  728                         .endm
  729                     
  730                     MOVE.R.A        .macro
  731                         .if (\?1=4)
  732                     
  733                             lda \1
  734                             sta \2
  735                         .endif
  736                     
  737                         .if (\?1=3)
  738                             lda \1
  739                             sta \2
  740                         .endif
  741                     
  742                         .if (\?1=2)
  743                             lda \1
  744                             sta \2
  745                         .endif
  746                     
  747                         .if (\?1=6)
  748                             lda \1
  749                             sta \2
  750                         .endif
  751                     
  752                         .if (\?1=1)
  753                             sta \2
  754                         .endif
  755                     
  756                         .endm
  757                     
  758                     MOVRY        .macro
  759                         .if (\?1=4)
  760                     
  761                             ldy \1
  762                             sty \2
  763                         .endif
  764                     
  765                         .if (\?1=3)
  766                             ldy \1
  767                             sty \2
  768                         .endif
  769                     
  770                         .if (\?1=2)
  771                             ldy #\1
  772                             sty \2
  773                         .endif
  774                     
  775                         .if (\?1=6)
  776                             ldy \1
  777                             sty \2
  778                         .endif
  779                     
  780                         .if (\?1=1)
  781                             sty \2
  782                         .endif
  783                     
  784                     
  785                         .endm
  786                     
  787                     
  788                     ; MOVE.w        .macro
  789                     ;     .if (\?1=4)
  790                     
  791                     ;         lda \1
  792                     ;         sta \2
  793                     ;         ldy #1
  794                     ;         lda \1,y
  795                     ;         sta \2 + 1
  796                     ;     .endif
  797                     
  798                     ;     .if (\?1=3)
  799                     ;         lda \1
  800                     ;         sta \2
  801                     ;         lda \1 + 1
  802                     ;         sta \2 + 1
  803                     ;     .endif
  804                     
  805                     ;     .if (\?1=2)
  806                     ;         lda #low(\1)
  807                     ;         sta \2
  808                     ;         lda #high(\1)
  809                     ;         sta \2 + 1
  810                     ;     .endif
  811                     
  812                     ;     .if (\?1=6)
  813                     ;         lda #low(\1)
  814                     ;         sta \2
  815                     ;         lda #high(\1 + 1)
  816                     ;         sta \2 + 1
  817                     ;     .endif
  818                     
  819                     ;     .endm
  820                     
  821                     
  822                     MOVE.IX.l        .macro
  823                     
  824                             ldx #\7-1
  825                     .x_\@
  826                             lda \1,x
  827                             sta \4,x
  828                             lda \2,x
  829                             sta \5,x
  830                             lda \3,x
  831                             sta \6,x
  832                             dex
  833                             bpl .x_\@
  834                         .endm
  835                     
  836                     MOVI_l        .macro
  837                     
  838                             lda \1
  839                             sta \2
  840                             lda \1 + 1
  841                             sta \3
  842                             lda \1 + 2
  843                             sta \4
  844                         .endm
  845                     
  846                     ; MOVE.Y.b    .macro
  847                     ;         ldy \1
  848                     ;     .endm
  849                     
  850                     ; MOVE.X.b    .macro
  851                     ;         ldx \1
  852                     ;     .endm
  853                     
  854                     
  855                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  856                     ;//..............................................
  857                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  858                     
  859                     ;................................................
  860                     DMA.word.port        .macro
  861                             tia (\1 & $1fff)+\2,\3,\4
  862                         .endm
  863                     
  864                     DMA.byte.Pport        .macro
  865                             tin (\1 & $1fff)+\2,\3,\4
  866                         .endm
  867                     
  868                     
  869                     DMA.far.local        .macro
  870                             tii (\1 & $1fff)+\2,\3,\4
  871                         .endm
  872                     
  873                     DMA.local        .macro
  874                             tii \1,\2,\3
  875                         .endm
  876                     
  877                     ;//................................................
  878                     ;// ADD macros
  879                     
  880                     
  881                     ;......................
  882                     ;CMP.word source,destination. 16bit + 16bit->16bit
  883                     CMP.w        .macro
  884                     
  885                             ;first error checks
  886                                 .if (\#<>2)
  887                                 .fail Macro requires two arguments
  888                                 .endif
  889                                 .if (\?2=0)
  890                                 .fail destination must be label, absolute address, or indirect. 1
  891                                 .endif
  892                                 .if (\?2=1)
  893                                 .fail destination must be label, absolute address, or indirect. 1
  894                                 .endif
  895                                 .if (\?2=5)
  896                                 .fail destination must be label, absolute address, or indirect. 1
  897                                 .endif
  898                     
  899                         .if (\?1=2) ;src=#immd
  900                             .if (\?2=2)    ;#immd
  901                                 lda #low(\1)
  902                                 cmp #low(\2)
  903                                 lda #high(\1)
  904                                 sbc #high(\2)
  905                     .skip_\@
  906                             .endif
  907                     
  908                             .if (\?2=3 | \?2=6)
  909                                 lda #low(\1)
  910                                 cmp \2
  911                                 lda #high(\1)
  912                                 sbc \2 + 1
  913                     .skip_\@
  914                             .endif
  915                     
  916                             .if (\?2=4)    ;indirect dest
  917                                 lda #low(\1)
  918                                 cmp \2
  919                                 ldy #$01
  920                                 lda #high(\1)
  921                                 sbc \2,y
  922                     .skip_\@
  923                             .endif
  924                         .endif
  925                     
  926                     
  927                     
  928                         .if (\?1=3 | \?1=6) ;src=addr/label
  929                             .if (\?2=2)    ;#immd
  930                                 lda \1
  931                                 cmp #low(\2)
  932                                 lda \1 + 1
  933                                 sbc #high(\2)
  934                     .skip_\@
  935                             .endif
  936                     
  937                             .if (\?2=3 | \?2=6)
  938                                 lda \1
  939                                 cmp \2
  940                                 lda \1 + 1
  941                                 sbc \2 + 1
  942                     .skip_\@
  943                             .endif
  944                     
  945                             .if (\?2=4)    ;indirect dest
  946                                 ldy #$01
  947                                 lda \1
  948                                 cmp \2
  949                                 lda \1 + 1
  950                                 sbc \2,y
  951                     .skip_\@
  952                             .endif
  953                         .endif
  954                     
  955                         .if (\?1=4) ;src=indirect
  956                             .if (\?2=2)
  957                                 ldy #$01
  958                                 lda \1
  959                                 cmp #low(\2)
  960                                 lda \1,y
  961                                 sbc #high(\2)
  962                     .skip_\@
  963                             .endif
  964                     
  965                             .if (\?2=3 | \?2=6)
  966                                 ldy #$01
  967                                 lda \1
  968                                 cmp \2
  969                                 lda \1,y
  970                                 sbc \2 + 1
  971                     .skip_\@
  972                             .endif
  973                     
  974                             .if (\?2=4)    ;indirect dest
  975                                 ldy #$01
  976                                 lda \1
  977                                 cmp \2
  978                                 lda \1,y
  979                                 sbc \2,y
  980                     .skip_\@
  981                             .endif
  982                         .endif
  983                     
  984                     
  985                         .endm
  986                     
  987                     
  988                     ;......................
  989                     ;CMP.byte arg1, arg2  (8bit,8bit)
  990                     CMP.b        .macro
  991                     
  992                             ;first error checks
  993                                 .if (\#<>2)
  994                                 .fail Macro requires two arguments
  995                                 .endif
  996                                 .if (\?2=0)
  997                                 .fail destination must be label, absolute address, or indirect. 1
  998                                 .endif
  999                                 .if (\?2=1)
 1000                                 .fail destination must be label, absolute address, or indirect. 1
 1001                                 .endif
 1002                                 .if (\?2=5)
 1003                                 .fail destination must be label, absolute address, or indirect. 1
 1004                                 .endif
 1005                     
 1006                         .if (\?1=2) ;src=#immd
 1007                             .if (\?2=2)    ;#immd
 1008                                 lda #low(\1)
 1009                                 cmp #low(\2)
 1010                             .endif
 1011                     
 1012                             .if (\?2=3 | \?2=6)
 1013                                 lda #low(\1)
 1014                                 cmp \2
 1015                             .endif
 1016                     
 1017                             .if (\?2=4)    ;indirect dest
 1018                                 lda #low(\1)
 1019                                 cmp \2
 1020                             .endif
 1021                         .endif
 1022                     
 1023                     
 1024                     
 1025                         .if (\?1=3 | \?1=6) ;src=addr/label
 1026                             .if (\?2=2)    ;#immd
 1027                                 lda \1
 1028                                 cmp #low(\2)
 1029                             .endif
 1030                     
 1031                             .if (\?2=3 | \?2=6)
 1032                                 lda \1
 1033                                 cmp \2
 1034                             .endif
 1035                     
 1036                             .if (\?2=4)    ;indirect dest
 1037                                 lda \1
 1038                                 cmp \2
 1039                             .endif
 1040                         .endif
 1041                     
 1042                         .if (\?1=4) ;src=indirect
 1043                             .if (\?2=2)
 1044                                 lda \1
 1045                                 cmp #\2
 1046                             .endif
 1047                     
 1048                             .if (\?2=3 | \?2=6)
 1049                                 lda \1
 1050                                 cmp \2
 1051                             .endif
 1052                     
 1053                             .if (\?2=4)    ;indirect dest
 1054                                 lda \1
 1055                                 cmp \2
 1056                             .endif
 1057                         .endif
 1058                     
 1059                     
 1060                         .endm
 1061                     
 1062                     
 1063                     
 1064                     ;//................................................
 1065                     ;// ADD macros
 1066                     
 1067                     ;......................
 1068                     ;ADD.byte source,destination
 1069                     ADD.b        .macro
 1070                             ;first error checks
 1071                                 .if (\#<>2)
 1072                                 .fail Macro requires two arguments
 1073                                 .endif
 1074                                 .if (\?2=0)
 1075                                 .fail destination must be label, absolute address, or indirect. 1
 1076                                 .endif
 1077                                 .if (\?2=1)
 1078                                 .fail destination must be label, absolute address, or indirect. 1
 1079                                 .endif
 1080                                 .if (\?2=2)
 1081                                 .fail destination must be label, absolute address, or indirect. 1
 1082                                 .endif
 1083                                 .if (\?2=5)
 1084                                 .fail destination must be label, absolute address, or indirect. 1
 1085                                 .endif
 1086                                 .if (\?1=5)
 1087                                 .fail destination must be label, absolute address, or indirect. 1
 1088                                 .endif
 1089                                 .if (\?1=1)
 1090                                 .fail destination must be label, absolute address, or indirect. 1
 1091                                 .endif
 1092                     
 1093                     
 1094                         .if (\?1=2) ;src=#immd
 1095                             .if (\?2=3 | \?2=6)
 1096                                 lda \2
 1097                                 clc
 1098                                 adc #low(\1)
 1099                                 sta \2
 1100                             .endif
 1101                     
 1102                             .if (\?2=4)    ;indirect dest
 1103                                 lda \2
 1104                                 clc
 1105                                 adc #low(\1)
 1106                                 sta \2
 1107                             .endif
 1108                         .endif
 1109                     
 1110                         .if (\?1=3 | \?1=6) ;src=addr/label
 1111                             .if (\?2=3 | \?2=6)
 1112                                 lda \2
 1113                                 clc
 1114                                 adc \1
 1115                                 sta \2
 1116                             .endif
 1117                     
 1118                             .if (\?2=4)    ;indirect dest
 1119                                 lda \2
 1120                                 clc
 1121                                 adc \1
 1122                                 sta \2
 1123                             .endif
 1124                         .endif
 1125                     
 1126                         .if (\?1=4) ;src=indirect
 1127                             .if (\?2=3 | \?2=6)
 1128                                 lda \2
 1129                                 clc
 1130                                 adc \1
 1131                                 sta \2
 1132                             .endif
 1133                     
 1134                             .if (\?2=4)    ;indirect dest
 1135                                 lda \2
 1136                                 clc
 1137                                 adc \1
 1138                                 sta \2
 1139                             .endif
 1140                         .endif
 1141                     
 1142                     
 1143                         .endm
 1144                     
 1145                     
 1146                     ;......................
 1147                     ;ADD.word source,destination. 16bit + 16bit->16bit
 1148                     ADD.w        .macro
 1149                     
 1150                             ;first error checks
 1151                                 .if (\#<>2)
 1152                                 .fail Macro requires two arguments
 1153                                 .endif
 1154                                 .if (\?2=0)
 1155                                 .fail destination must be label, absolute address, or indirect. 1
 1156                                 .endif
 1157                                 .if (\?2=1)
 1158                                 .fail destination must be label, absolute address, or indirect. 1
 1159                                 .endif
 1160                                 .if (\?2=2)
 1161                                 .fail destination must be label, absolute address, or indirect. 1
 1162                                 .endif
 1163                                 .if (\?2=5)
 1164                                 .fail destination must be label, absolute address, or indirect. 1
 1165                                 .endif
 1166                     
 1167                         .if (\?1=2) ;src=#immd
 1168                             .if (\?2=3 | \?2=6)
 1169                                 lda #low(\1)
 1170                                 clc
 1171                                 adc \2
 1172                                 sta \2
 1173                                 ;bcc .skip\@
 1174                                 lda #high(\1)
 1175                                 adc \2 + 1
 1176                                 sta \2 + 1
 1177                     .skip\@
 1178                             .endif
 1179                     
 1180                             .if (\?2=4)    ;indirect dest
 1181                                 lda #low(\1)
 1182                                 clc
 1183                                 adc \2
 1184                                 sta \2
 1185                                 ;bcc .skip\@
 1186                                 phy
 1187                                 ldy #$01
 1188                                 lda #high(\1)
 1189                                 adc \2,y
 1190                                 sta \2,y
 1191                                 ply
 1192                     .skip\@
 1193                             .endif
 1194                         .endif
 1195                     
 1196                         .if (\?1=3 | \?1=6) ;src=addr/label
 1197                             .if (\?2=3 | \?2=6)
 1198                                 lda \1
 1199                                 clc
 1200                                 adc \2
 1201                                 sta \2
 1202                                 ;bcc .skip\@
 1203                                 lda \1 + 1
 1204                                 adc \2 + 1
 1205                                 sta \2 + 1
 1206                     .skip\@
 1207                             .endif
 1208                     
 1209                             .if (\?2=4)    ;indirect dest
 1210                                 lda \1
 1211                                 clc
 1212                                 adc \2
 1213                                 sta \2
 1214                                 ;bcc .skip\@
 1215                                 phy
 1216                                 ldy #$01
 1217                                 lda \1 + 1
 1218                                 adc \2,y
 1219                                 sta \2,y
 1220                                 ply
 1221                     .skip\@
 1222                             .endif
 1223                         .endif
 1224                     
 1225                         .if (\?1=4) ;src=indirect
 1226                             .if (\?2=3 | \?2=6)
 1227                                 lda \1
 1228                                 clc
 1229                                 adc \2
 1230                                 sta \2
 1231                                 ;bcc .skip\@
 1232                                 phy
 1233                                 ldy #$01
 1234                                 lda \1,y
 1235                                 adc \2 + 1
 1236                                 sta \2 + 1
 1237                                 ply
 1238                     .skip\@
 1239                             .endif
 1240                     
 1241                             .if (\?2=4)    ;indirect dest
 1242                                 lda \1
 1243                                 clc
 1244                                 adc \2
 1245                                 sta \2
 1246                                 ;bcc .skip\@
 1247                                 phy
 1248                                 ldy #$01
 1249                                 lda \1,y
 1250                                 adc \2,y
 1251                                 sta \2,y
 1252                                 ply
 1253                     .skip\@
 1254                             .endif
 1255                         .endif
 1256                     
 1257                     
 1258                         .endm
 1259                     
 1260                     ;......................
 1261                     ;ADD.byte.word source,destination. 8bit + 16bit->16bit
 1262                     ADD.b.w        .macro
 1263                     
 1264                             ;first error checks
 1265                                 .if (\#<>2)
 1266                                 .fail Macro requires two arguments
 1267                                 .endif
 1268                                 .if (\?2=0)
 1269                                 .fail destination must be label, absolute address, or indirect. 1
 1270                                 .endif
 1271                                 .if (\?2=1)
 1272                                 .fail destination must be label, absolute address, or indirect. 1
 1273                                 .endif
 1274                                 .if (\?2=2)
 1275                                 .fail destination must be label, absolute address, or indirect. 1
 1276                                 .endif
 1277                                 .if (\?2=5)
 1278                                 .fail destination must be label, absolute address, or indirect. 1
 1279                                 .endif
 1280                     
 1281                         .if (\?1=2) ;src=#immd
 1282                             .if (\?2=3 | \?2=6)
 1283                                 lda #low(\1)
 1284                                 clc
 1285                                 adc \2
 1286                                 sta \2
 1287                                 bcc .skip\@
 1288                                 inc \2 + 1
 1289                     .skip\@
 1290                             .endif
 1291                     
 1292                             .if (\?2=4)    ;indirect dest
 1293                                 lda #low(\1)
 1294                                 clc
 1295                                 adc \2
 1296                                 sta \2
 1297                                 bcc .skip\@
 1298                                 phy
 1299                                 ldy #$01
 1300                                 lda \2,y
 1301                                 inc a
 1302                                 sta \2,y
 1303                                 ply
 1304                     .skip\@
 1305                             .endif
 1306                         .endif
 1307                     
 1308                         .if (\?1=3 | \?1=6) ;src=addr/label
 1309                             .if (\?2=3 | \?2=6)
 1310                                 lda \1
 1311                                 clc
 1312                                 adc \2
 1313                                 sta \2
 1314                                 bcc .skip\@
 1315                                 inc \2 + 1
 1316                     .skip\@
 1317                             .endif
 1318                     
 1319                             .if (\?2=4)    ;indirect dest
 1320                                 lda \1
 1321                                 clc
 1322                                 adc \2
 1323                                 sta \2
 1324                                 bcc .skip\@
 1325                                 phy
 1326                                 ldy #$01
 1327                                 lda \2,y
 1328                                 inc a
 1329                                 sta \2,y
 1330                                 ply
 1331                     .skip\@
 1332                             .endif
 1333                         .endif
 1334                     
 1335                         .if (\?1=4) ;src=indirect
 1336                             .if (\?2=3 | \?2=6)
 1337                                 lda \1
 1338                                 clc
 1339                                 adc \2
 1340                                 sta \2
 1341                                 bcc .skip\@
 1342                                 phy
 1343                                 ldy #$01
 1344                                 lda \2 + 1
 1345                                 inc a
 1346                                 sta \2 + 1
 1347                                 ply
 1348                     .skip\@
 1349                             .endif
 1350                     
 1351                             .if (\?2=4)    ;indirect dest
 1352                                 lda \1
 1353                                 clc
 1354                                 adc \2
 1355                                 sta \2
 1356                                 bcc .skip\@
 1357                                 phy
 1358                                 ldy #$01
 1359                                 lda \2,y
 1360                                 inc a
 1361                                 sta \2,y
 1362                                 ply
 1363                     .skip\@
 1364                             .endif
 1365                         .endif
 1366                     
 1367                     
 1368                         .endm
 1369                     
 1370                     
 1371                     ;......................
 1372                     ;ADD.word.long source,destination. 16bit + 24bit->24bit
 1373                     ADD.w.l.split        .macro
 1374                     
 1375                             ;first error checks
 1376                                 .if (\#<>2)
 1377                                 .fail Macro requires two arguments
 1378                                 .endif
 1379                                 .if (\?2=0)
 1380                                 .fail destination must be label, absolute address, or indirect. 1
 1381                                 .endif
 1382                                 .if (\?2=1)
 1383                                 .fail destination must be label, absolute address, or indirect. 1
 1384                                 .endif
 1385                                 .if (\?2=2)
 1386                                 .fail destination must be label, absolute address, or indirect. 1
 1387                                 .endif
 1388                                 .if (\?2=5)
 1389                                 .fail destination must be label, absolute address, or indirect. 1
 1390                                 .endif
 1391                     
 1392                         .if (\?1=2) ;src=#immd
 1393                                 lda #low(\1)
 1394                                 clc
 1395                                 adc \2.lo
 1396                                 sta \2.lo
 1397                                 lda #high(\1)
 1398                                 adc \2.mid
 1399                                 sta \2.mid
 1400                             bcc .skip\@
 1401                                 inc \2.hi
 1402                     .skip\@
 1403                         .endif
 1404                     
 1405                         .if (\?1=3 | \?1=6) ;src=addr/label
 1406                                 lda \1
 1407                                 clc
 1408                                 adc \2.lo
 1409                                 sta \2.lo
 1410                                 lda \1 + 1
 1411                                 adc \2.mid
 1412                                 sta \2.mid
 1413                             bcc .skip\@
 1414                                 inc \2.hi
 1415                     .skip\@
 1416                         .endif
 1417                     
 1418                         .if (\?1=4) ;src=indirect
 1419                                 lda [\1]
 1420                                 clc
 1421                                 adc \2.lo
 1422                                 sta \2.lo
 1423                                 ldy #$01
 1424                                 lda [\1],y
 1425                                 adc \2.mid
 1426                                 sta \2.mid
 1427                             bcc .skip\@
 1428                                 inc \2.hi
 1429                     .skip\@
 1430                         .endif
 1431                     
 1432                     
 1433                         .endm
 1434                     
 1435                     
 1436                     ;......................
 1437                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1438                     ADD.Y.w        .macro
 1439                     
 1440                             ;first error checks
 1441                                 .if (\#<>1)
 1442                                 .fail Macro requires two arguments
 1443                                 .endif
 1444                                 .if (\?1=0)
 1445                                 .fail destination must be label, absolute address, or indirect. 1
 1446                                 .endif
 1447                                 .if (\?1=1)
 1448                                 .fail destination must be label, absolute address, or indirect. 1
 1449                                 .endif
 1450                                 .if (\?1=2)
 1451                                 .fail destination must be label, absolute address, or indirect. 1
 1452                                 .endif
 1453                                 .if (\?1=5)
 1454                                 .fail destination must be label, absolute address, or indirect. 1
 1455                                 .endif
 1456                     
 1457                     
 1458                             .if (\?1=3 | \?1=6)
 1459                                 tya
 1460                                 clc
 1461                                 adc \1
 1462                                 sta \1
 1463                                 bcc .skip\@
 1464                                 inc \1 + 1
 1465                     .skip\@
 1466                             .endif
 1467                     
 1468                             .if (\?1=4)    ;indirect dest
 1469                                 tya
 1470                                 clc
 1471                                 adc \1
 1472                                 sta \1
 1473                                 bcc .skip\@
 1474                                 phy
 1475                                 ldy #$01
 1476                                 lda \1,y
 1477                                 inc a
 1478                                 sta \1,y
 1479                                 ply
 1480                     .skip\@
 1481                             .endif
 1482                     
 1483                     
 1484                         .endm
 1485                     
 1486                     ;......................
 1487                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1488                     ADD.A.w        .macro
 1489                     
 1490                             ;first error checks
 1491                                 .if (\#<>1)
 1492                                 .fail Macro requires two arguments
 1493                                 .endif
 1494                                 .if (\?1=0)
 1495                                 .fail destination must be label, absolute address, or indirect. 1
 1496                                 .endif
 1497                                 .if (\?1=1)
 1498                                 .fail destination must be label, absolute address, or indirect. 1
 1499                                 .endif
 1500                                 .if (\?1=2)
 1501                                 .fail destination must be label, absolute address, or indirect. 1
 1502                                 .endif
 1503                                 .if (\?1=5)
 1504                                 .fail destination must be label, absolute address, or indirect. 1
 1505                                 .endif
 1506                     
 1507                     
 1508                             .if (\?1=3 | \?1=6)
 1509                                 clc
 1510                                 adc \1
 1511                                 sta \1
 1512                                 bcc .skip\@
 1513                                 inc \1 + 1
 1514                     .skip\@
 1515                             .endif
 1516                     
 1517                         .endm
 1518                     
 1519                     ;......................
 1520                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1521                     ADD.A.b        .macro
 1522                     
 1523                             ;first error checks
 1524                                 .if (\#<>1)
 1525                                 .fail Macro requires two arguments
 1526                                 .endif
 1527                                 .if (\?1=0)
 1528                                 .fail destination must be label, absolute address, or indirect. 1
 1529                                 .endif
 1530                                 .if (\?1=1)
 1531                                 .fail destination must be label, absolute address, or indirect. 1
 1532                                 .endif
 1533                                 .if (\?1=2)
 1534                                 .fail destination must be label, absolute address, or indirect. 1
 1535                                 .endif
 1536                                 .if (\?1=5)
 1537                                 .fail destination must be label, absolute address, or indirect. 1
 1538                                 .endif
 1539                     
 1540                     
 1541                             .if (\?1=3 | \?1=6)
 1542                                 clc
 1543                                 adc \1
 1544                                 sta \1
 1545                     
 1546                             .endif
 1547                     
 1548                         .endm
 1549                     
 1550                     
 1551                     
 1552                     ;......................
 1553                     ;AND.word.long source,destination. 16bit + 24bit->24bit
 1554                     AND.b.b.w  .macro
 1555                     
 1556                             ;first error checks
 1557                                 .if (\#<>3)
 1558                                 .fail Macro requires two arguments
 1559                                 .endif
 1560                     
 1561                             lda \2
 1562                             and \1
 1563                             sta \3
 1564                             stz \3
 1565                     
 1566                         .endm
 1567                     
 1568                     
 1569                     ;......................
 1570                     ;AND.word source,destination. 16bit + 16bit->16bit
 1571                     AND.w        .macro
 1572                     
 1573                             ;first error checks
 1574                                 .if (\#<>2)
 1575                                 .fail Macro requires two arguments
 1576                                 .endif
 1577                                 .if (\?2=0)
 1578                                 .fail destination must be label, absolute address, or indirect. 1
 1579                                 .endif
 1580                                 .if (\?2=1)
 1581                                 .fail destination must be label, absolute address, or indirect. 1
 1582                                 .endif
 1583                                 .if (\?2=2)
 1584                                 .fail destination must be label, absolute address, or indirect. 1
 1585                                 .endif
 1586                                 .if (\?2=5)
 1587                                 .fail destination must be label, absolute address, or indirect. 1
 1588                                 .endif
 1589                     
 1590                         .if (\?1=2) ;src=#immd
 1591                             .if (\?2=3 | \?2=6)
 1592                                 lda #low(\1)
 1593                                 and \2
 1594                                 sta \2
 1595                                 lda #high(\1)
 1596                                 and \2 + 1
 1597                                 sta \2 + 1
 1598                             .endif
 1599                     
 1600                             .if (\?2=4)    ;indirect dest
 1601                                 lda #low(\1)
 1602                                 and \2
 1603                                 sta \2
 1604                                 phy
 1605                                 ldy #$01
 1606                                 lda #high(\1)
 1607                                 and \2,y
 1608                                 sta \2,y
 1609                                 ply
 1610                             .endif
 1611                         .endif
 1612                     
 1613                         .if (\?1=3 | \?1=6) ;src=addr/label
 1614                             .if (\?2=3 | \?2=6)
 1615                                 lda \1
 1616                                 and \2
 1617                                 sta \2
 1618                                 lda \1 + 1
 1619                                 and \2 + 1
 1620                                 sta \2 + 1
 1621                             .endif
 1622                     
 1623                             .if (\?2=4)    ;indirect dest
 1624                                 lda \1
 1625                                 and \2
 1626                                 sta \2
 1627                                 phy
 1628                                 ldy #$01
 1629                                 lda \1 + 1
 1630                                 and \2,y
 1631                                 sta \2,y
 1632                                 ply
 1633                             .endif
 1634                         .endif
 1635                     
 1636                         .if (\?1=4) ;src=indirect
 1637                             .if (\?2=3 | \?2=6)
 1638                                 lda \1
 1639                                 and \2
 1640                                 sta \2
 1641                                 phy
 1642                                 ldy #$01
 1643                                 lda \1,y
 1644                                 and \2 + 1
 1645                                 sta \2 + 1
 1646                                 ply
 1647                             .endif
 1648                     
 1649                             .if (\?2=4)    ;indirect dest
 1650                                 lda \1
 1651                                 and \2
 1652                                 sta \2
 1653                                 phy
 1654                                 ldy #$01
 1655                                 lda \1,y
 1656                                 and \2,y
 1657                                 sta \2,y
 1658                                 ply
 1659                             .endif
 1660                         .endif
 1661                     
 1662                     
 1663                         .endm
 1664                     
 1665                     
 1666                     ;......................
 1667                     ;ASL.Y
 1668                     ASL.Y.safe        .macro
 1669                             say
 1670                             asl a
 1671                             say
 1672                         .endm
 1673                     
 1674                     ASL.2.Y.safe        .macro
 1675                             say
 1676                             asl a
 1677                             asl a
 1678                             say
 1679                         .endm
 1680                     
 1681                     ASL.3.Y.safe        .macro
 1682                             say
 1683                             asl a
 1684                             asl a
 1685                             asl a
 1686                             say
 1687                         .endm
 1688                     
 1689                     ASL.Y        .macro
 1690                             say
 1691                             asl a
 1692                             say
 1693                         .endm
 1694                     
 1695                     ASL.2.Y        .macro
 1696                             say
 1697                             asl a
 1698                             asl a
 1699                             say
 1700                         .endm
 1701                     
 1702                     ASL.3.Y        .macro
 1703                             say
 1704                             asl a
 1705                             asl a
 1706                             asl a
 1707                             say
 1708                         .endm
 1709                     
 1710                     ;......................
 1711                     ;ASL.X  
 1712                     ASL.X.safe        .macro
 1713                             sax
 1714                             asl a
 1715                             sax
 1716                         .endm
 1717                     
 1718                     ASL.2.X.safe        .macro
 1719                             sax
 1720                             asl a
 1721                             asl a
 1722                             sax
 1723                         .endm
 1724                     
 1725                     ASL.3.X.safe        .macro
 1726                             sax
 1727                             asl a
 1728                             asl a
 1729                             asl a
 1730                             sax
 1731                         .endm
 1732                     
 1733                     ASL.X        .macro
 1734                             sax
 1735                             asl a
 1736                             sax
 1737                         .endm
 1738                     
 1739                     ASL.2.X        .macro
 1740                             sax
 1741                             asl a
 1742                             asl a
 1743                             sax
 1744                         .endm
 1745                     
 1746                     ASL.3.X        .macro
 1747                             sax
 1748                             asl a
 1749                             asl a
 1750                             asl a
 1751                             sax
 1752                         .endm
 1753                     
 1754                     
 1755                     ;......................
 1756                     ;ASL.Y  
 1757                     LSL.Y        .macro
 1758                     
 1759                             ;first error checks
 1760                                 .if (\#<>1)
 1761                                 .fail Macro requires two arguments
 1762                                 .endif
 1763                                 .if (\?1=0)
 1764                                 .fail destination must be label, absolute address, or indirect. 1
 1765                                 .endif
 1766                                 .if (\?1=1)
 1767                                 .fail destination must be label, absolute address, or indirect. 1
 1768                                 .endif
 1769                                 .if (\?1=2)
 1770                                 .fail destination must be label, absolute address, or indirect. 1
 1771                                 .endif
 1772                                 .if (\?1=5)
 1773                                 .fail destination must be label, absolute address, or indirect. 1
 1774                                 .endif
 1775                     
 1776                     
 1777                             say
 1778                             cmp #$80
 1779                             asl a
 1780                             say
 1781                     
 1782                     
 1783                         .endm
 1784                     
 1785                     ;......................
 1786                     ;LSR.b  
 1787                     LSR.b        .macro
 1788                         lsr \1
 1789                         .endm
 1790                     
 1791                     LSR.2.b        .macro
 1792                         lsr \1
 1793                         lsr \1
 1794                         .endm
 1795                     
 1796                     LSR.3.b        .macro
 1797                         lsr \1
 1798                         lsr \1
 1799                         lsr \1
 1800                         .endm
 1801                     
 1802                     LSR.4.b        .macro
 1803                         lsr \1
 1804                         lsr \1
 1805                         lsr \1
 1806                         lsr \1
 1807                         .endm
 1808                     
 1809                     ;......................
 1810                     ;LSR.w  
 1811                     LSR.w        .macro
 1812                         lsr \1
 1813                         ror \1 + 1
 1814                         .endm
 1815                     
 1816                     LSR.2.w        .macro
 1817                         lsr \1
 1818                         ror \1 + 1
 1819                         lsr \1
 1820                         ror \1 + 1
 1821                         .endm
 1822                     
 1823                     LSR.3.w        .macro
 1824                     
 1825                         .if (\?1 = 6 & \1 = AX)
 1826                             lsr a
 1827                             sax
 1828                             ror a
 1829                             sax
 1830                             ror a
 1831                             sax
 1832                             ror a
 1833                             sax
 1834                             ror a
 1835                             sax
 1836                             ror a
 1837                             sax
 1838                         .endif
 1839                     
 1840                         .if (\?1 = 6 & \1 = AY)
 1841                             lsr a
 1842                             say
 1843                             ror a
 1844                             say
 1845                             ror a
 1846                             say
 1847                             ror a
 1848                             say
 1849                             ror a
 1850                             say
 1851                             ror a
 1852                             say
 1853                         .endif
 1854                         .endm
 1855                     
 1856                     LSR.4.w        .macro
 1857                         lsr \1
 1858                         ror \1 + 1
 1859                         lsr \1
 1860                         ror \1 + 1
 1861                         lsr \1
 1862                         ror \1 + 1
 1863                         lsr \1
 1864                         ror \1 + 1
 1865                         .endm
 1866                     
 1867                     ;.......
 1868                     
 1869                     ;...............
 1870                     ;OR.w  src, dest
 1871                     OR.w        .macro
 1872                     
 1873                             ;first error checks
 1874                                 .if (\#<>2)
 1875                                 .fail Macro requires two arguments
 1876                                 .endif
 1877                                 .if (\?2=0)
 1878                                 .fail destination must be label, absolute address, or indirect. 1
 1879                                 .endif
 1880                                 .if (\?2=1)
 1881                                 .fail destination must be label, absolute address, or indirect. 1
 1882                                 .endif
 1883                                 .if (\?2=5)
 1884                                 .fail destination must be label, absolute address, or indirect. 1
 1885                                 .endif
 1886                     
 1887                         .if (\?1=2) ;src=#immd
 1888                             .if (\?2=2)    ;#immd
 1889                                 lda #low(\1)
 1890                                 ora #low(\2)
 1891                                 lda #high(\1)
 1892                                 ora #high(\2)
 1893                     .skip_\@
 1894                             .endif
 1895                     
 1896                             .if (\?2=3 | \?2=6)
 1897                                 lda #low(\1)
 1898                                 ora \2
 1899                                 lda #high(\1)
 1900                                 ora \2 + 1
 1901                     .skip_\@
 1902                             .endif
 1903                     
 1904                             .if (\?2=4)    ;indirect dest
 1905                                 lda #low(\1)
 1906                                 ora \2
 1907                                 ldy #$01
 1908                                 lda #high(\1)
 1909                                 ora \2,y
 1910                     .skip_\@
 1911                             .endif
 1912                         .endif
 1913                     
 1914                     
 1915                     
 1916                         .if (\?1=3 | \?1=6) ;src=addr/label
 1917                             .if (\?2=2)    ;#immd
 1918                                 lda \1
 1919                                 ora #low(\2)
 1920                                 lda \1 + 1
 1921                                 ora #high(\2)
 1922                     .skip_\@
 1923                             .endif
 1924                     
 1925                             .if (\?2=3 | \?2=6)
 1926                                 lda \1
 1927                                 ora \2
 1928                                 lda \1 + 1
 1929                                 ora \2 + 1
 1930                     .skip_\@
 1931                             .endif
 1932                     
 1933                             .if (\?2=4)    ;indirect dest
 1934                                 ldy #$01
 1935                                 lda \1
 1936                                 ora \2
 1937                                 lda \1 + 1
 1938                                 ora \2,y
 1939                     .skip_\@
 1940                             .endif
 1941                         .endif
 1942                     
 1943                         .if (\?1=4) ;src=indirect
 1944                             .if (\?2=2)
 1945                                 ldy #$01
 1946                                 lda \1
 1947                                 ora #low(\2)
 1948                                 lda \1,y
 1949                                 ora #high(\2)
 1950                     .skip_\@
 1951                             .endif
 1952                     
 1953                             .if (\?2=3 | \?2=6)
 1954                                 ldy #$01
 1955                                 lda \1
 1956                                 ora \2
 1957                                 lda \1,y
 1958                                 ora \2 + 1
 1959                     .skip_\@
 1960                             .endif
 1961                     
 1962                             .if (\?2=4)    ;indirect dest
 1963                                 ldy #$01
 1964                                 lda \1
 1965                                 ora \2
 1966                                 lda \1,y
 1967                                 ora \2,y
 1968                     .skip_\@
 1969                             .endif
 1970                         .endif
 1971                     
 1972                     
 1973                         .endm
 1974                     
 1975                     
 1976                     ;................................................
 1977                     BNE.l    .macro
 1978                             beq .x_\@
 1979                             jmp \1
 1980                     .x_\@
 1981                     
 1982                         .endm
 1983                     
 1984                     BEQ.l    .macro
 1985                             bne .x_\@
 1986                             jmp \1
 1987                     .x_\@
 1988                     
 1989                         .endm
 1990                     
 1991                     BPL.l    .macro
 1992                             BMI .x_\@
 1993                             jmp \1
 1994                     .x_\@
 1995                     
 1996                         .endm
 1997                     
 1998                     BMI.l    .macro
 1999                             bpl .x_\@
 2000                             jmp \1
 2001                     .x_\@
 2002                     
 2003                         .endm
 2004                     
 2005                     BCS.l    .macro
 2006                             bcc .x_\@
 2007                             jmp \1
 2008                     .x_\@
 2009                     
 2010                         .endm
 2011                     
 2012                     BCC.l    .macro
 2013                             bcs .x_\@
 2014                             jmp \1
 2015                     .x_\@
 2016                     
 2017                         .endm
 2018                     
 2019                     BVS.l    .macro
 2020                             bvc .x_\@
 2021                             jmp \1
 2022                     .x_\@
 2023                     
 2024                         .endm
 2025                     
 2026                     BVC.l    .macro
 2027                             bvs .x_\@
 2028                             jmp \1
 2029                     .x_\@
 2030                     
 2031                         .endm
 2032                     
 2033                     
 2034                     ;................................................
 2035                     
 2036                     ;......................
 2037                     ;PUSHBANK.1  addr
 2038                     PUSHBANK.1        .macro
 2039                         .if (\#=0)
 2040                         .fail Macro requires one argument
 2041                         .endif
 2042                     
 2043                             tma #(high(\1)>>5)
 2044                             pha
 2045                         .endm
 2046                     
 2047                     ;......................
 2048                     ;PUSHBANK.2  addr
 2049                     PUSHBANK.2        .macro
 2050                         .if (\#=0)
 2051                         .fail Macro requires one argument
 2052                         .endif
 2053                     
 2054                     
 2055                             tma #(\1)
 2056                             pha
 2057                             tma #(\1 + 1)
 2058                             pha
 2059                         .endm
 2060                     
 2061                     ;......................
 2062                     ;PUSHBANK.3 addr
 2063                     PUSHBANK.3        .macro
 2064                         .if (\#=0)
 2065                         .fail Macro requires one argument
 2066                         .endif
 2067                     
 2068                     
 2069                             tma #(\1)
 2070                             pha
 2071                             tma #(\1 + 1)
 2072                             pha
 2073                             tma #(\1 + 2)
 2074                             pha
 2075                         .endm
 2076                     
 2077                     ;......................
 2078                     ;PUSHBANK.4 addr
 2079                     PUSHBANK.4        .macro
 2080                         .if (\#=0)
 2081                         .fail Macro requires one argument
 2082                         .endif
 2083                     
 2084                     
 2085                             tma #(\1 + 1)
 2086                             pha
 2087                             tma #(\1 + 1)
 2088                             pha
 2089                             tma #(\1 + 2)
 2090                             pha
 2091                             tma #(\1 + 3)
 2092                             pha
 2093                         .endm
 2094                     
 2095                     ;......................
 2096                     ;PULLBANK.1 addr
 2097                     PULLBANK.1        .macro
 2098                         .if (\#=0)
 2099                         .fail Macro requires one argument
 2100                         .endif
 2101                     
 2102                     
 2103                             pla
 2104                             tam #(\1)
 2105                         .endm
 2106                     
 2107                     ;......................
 2108                     ;PULLBANK.2 addr
 2109                     PULLBANK.2        .macro
 2110                         .if (\#=0)
 2111                         .fail Macro requires one argument
 2112                         .endif
 2113                     
 2114                     
 2115                             pla
 2116                             tam #(\1 + 1)
 2117                             pla
 2118                             tam #(\1)
 2119                         .endm
 2120                     
 2121                     ;......................
 2122                     ;PULLBANK.3 addr
 2123                     PULLBANK.3        .macro
 2124                         .if (\#=0)
 2125                         .fail Macro requires one argument
 2126                         .endif
 2127                     
 2128                     
 2129                             pla
 2130                             tam #(\1 + 2)
 2131                             pla
 2132                             tam #(\1 + 1)
 2133                             pla
 2134                             tam #(\1)
 2135                         .endm
 2136                     
 2137                     
 2138                     ;......................
 2139                     ;PULLBANK.4 addr
 2140                     PULLBANK.4        .macro
 2141                         .if (\#=0)
 2142                         .fail Macro requires one argument
 2143                         .endif
 2144                     
 2145                             pla
 2146                             tam #(\1 + 3)
 2147                             pla
 2148                             tam #(\1 + 2)
 2149                             pla
 2150                             tam #(\1 + 1)
 2151                             pla
 2152                             tam #(\1)
 2153                         .endm
 2154                     
 2155                     
 2156                     
 2157                     
 2158                     ;................................................
 2159                     
 2160                     CPUslow_INTdisabled    .macro
 2161                                 php
 2162                                 sei
 2163                                 csl
 2164                         .endm
 2165                     
 2166                     CPU_slow    .macro
 2167                                 php
 2168                                 csl
 2169                         .endm
 2170                     
 2171                     
 2172                     CPU_restored    .macro
 2173                                 plp
 2174                         .endm
 2175                     
 2176                     ;................................................
 2177                     
 2178                     InitialStartup    .macro
 2179                     
 2180                                     sei
 2181                                     cld
 2182                                     csh
 2183                                     ldx #$ff
 2184                                     txs
 2185                                     lda #$ff
 2186                                     tam #$00
 2187                                     lda #$f8
 2188                                     tam #$01
 2189                     
 2190                         .endm
 2191                     
 2192                     
 2193                     
 2194                     ;.................................................
 2195                     AlignByte256    .macro
 2196                     
 2197                         .org ( (* + 255) & $ff00)
 2198                     
 2199                         .endm
 2200                     
 2201                     ;.................................................
 2202                     IncludeBinary    .macro
 2203                     
 2204                     start_\@:
 2205                     \1: .incbin \2
 2206                     end_\@:
 2207                     
 2208                     \1.size = sizeof(\1)
 2209                     
 2210                         .endm
 2211                     
 2212                     ;.................................................
 2213                     IncludeData    .macro
 2214                     
 2215                     start_\@:
 2216                     \1:  .include \2
 2217                     end_\@:
 2218                     
 2219                     \1.size = end_\@ - start_\@
 2220                     
 2221                         .endm
 2222                     
 2223                     ;.................................................
 2224                     IncludeCode    .macro
 2225                     
 2226                     \1:
 2227                             .include \2
 2228                     .end_\@:
 2229                     
 2230                     \1.size = .end_\@ - \1
 2231                     
 2232                         .endm
 2233                     
 2234                     
 2235                     ;.................................................
 2236                     FOLLOW_ENTRY   .macro
 2237                             plx
 2238                             jmp [\1,x]
 2239                         .endm
 2240                     
 2241                     ;.................................................
 2242                     CONNECT_ENTRY   .macro
 2243                             ldy #$01
 2244                             jmp \1
 2245                         .endm
 2246                     ;.................................................
 2247                     ENTRY_POINT   .macro
 2248                     .self_\@
 2249                             .dw .self_\@ + 2
 2250                         .endm
 2251                     
 2252                     
 2253                     ;.................................................
 2254                     STOW_ENTRY.b   .macro
 2255                             lda #\1
 2256                             sta \2
 2257                         .endm
 2258                     
 2259                     ;.................................................
 2260                     STOW_ENTRY.w   .macro
 2261                             lda #low(\1)
 2262                             sta \2
 2263                             lda #high(\1)
 2264                             sta \2 + 1
 2265                         .endm
 2266                     
 2267                     ;.................................................
 2268                     STOW_ENTRY.addr   .macro
 2269                             lda #low(.addr_\@)
 2270                             sta \2
 2271                             lda #high(.addr_\@)
 2272                             sta \2 + 1
 2273                     .addr_\@
 2274                         .endm
 2275                     
 2276                     ;.................................................
 2277                     RTS_ENTRY   .macro
 2278                             lda #low(.addr_\@)
 2279                             ldx #high(.addr_\@)
 2280                     .addr_\@
 2281                         rts
 2282                         .endm
 2283                     
 2284                     ;.................................................
 2285                     RETURN_ENTRY.stack   .macro
 2286                             lda #low(.addr_\@)
 2287                             pha
 2288                             lda #high(.addr_\@)
 2289                             pha
 2290                     .addr_\@
 2291                         jmp \2
 2292                         .endm
 2293                     
 2294                     ;.................................................
 2295                     RETURN_ENTRY.AX   .macro
 2296                             lda #low(.addr_\@)
 2297                             ldx #high(.addr_\@)
 2298                         jmp \1
 2299                     .addr_\@
 2300                         .endm
 2301                     
 2302                     
 2303                     ;.................................................
 2304                     ADD_ENTRY.b   .macro
 2305                             lda \1
 2306                             clc
 2307                             adc #\2
 2308                             sta \3
 2309                         .endm
 2310                     
 2311                     ;.................................................
 2312                     ADD_ENTRY.w   .macro
 2313                             lda \1
 2314                             clc
 2315                             adc #low(\2)
 2316                             sta \3 + 1
 2317                             lda \1 + 1
 2318                             adc #high(\2)
 2319                             sta \3 + 1
 2320                         .endm
 2321                     
 2322                     ;......................
 2323                     ;SUB.word source,destination. 16bit + 16bit->16bit
 2324                     SUB.w        .macro
 2325                     
 2326                             ;first error checks
 2327                                 .if (\#<>2)
 2328                                 .fail Macro requires two arguments
 2329                                 .endif
 2330                                 .if (\?2=0)
 2331                                 .fail destination must be label, absolute address, or indirect. 1
 2332                                 .endif
 2333                                 .if (\?2=1)
 2334                                 .fail destination must be label, absolute address, or indirect. 1
 2335                                 .endif
 2336                                 .if (\?2=2)
 2337                                 .fail destination must be label, absolute address, or indirect. 1
 2338                                 .endif
 2339                                 .if (\?2=5)
 2340                                 .fail destination must be label, absolute address, or indirect. 1
 2341                                 .endif
 2342                     
 2343                         .if (\?1=2) ;src=#immd
 2344                             .if (\?2=3 | \?2=6)
 2345                                 lda \2
 2346                                 sec
 2347                                 sbc #low(\1)
 2348                                 sta \2
 2349                                 lda \2 + 1
 2350                                 sbc #high(\1)
 2351                                 sta \2 + 1
 2352                             .endif
 2353                     
 2354                             .if (\?2=4)    ;indirect dest
 2355                                 lda \2
 2356                                 sec
 2357                                 sbc #low(\1)
 2358                                 sta \2
 2359                                     phy
 2360                                 ldy #$01
 2361                                 lda \2 + 1,y
 2362                                 sbc #high(\1)
 2363                                 sta \2 + 1,y
 2364                                     ply
 2365                             .endif
 2366                         .endif
 2367                     
 2368                         .if (\?1=3 | \?1=6) ;src=addr/label
 2369                             .if (\?2=3 | \?2=6)
 2370                                 lda \2
 2371                                 sec
 2372                                 sbc \1
 2373                                 sta \2
 2374                                 lda \2 + 1
 2375                                 sbc \1 + 1
 2376                                 sta \2 + 1
 2377                             .endif
 2378                     
 2379                             .if (\?2=4)    ;indirect dest
 2380                                 lda \2
 2381                                 sec
 2382                                 sbc \1
 2383                                 sta \2
 2384                                     phy
 2385                                 ldy #$01
 2386                                 lda \2 + 1,y
 2387                                 sbc \1
 2388                                 sta \2 + 1,y
 2389                                     ply
 2390                             .endif
 2391                         .endif
 2392                     
 2393                         .if (\?1=4) ;src=indirect
 2394                             .if (\?2=3 | \?2=6)
 2395                                 lda \2
 2396                                 sec
 2397                                 sbc \1
 2398                                 sta \2
 2399                                     phy
 2400                                 ldy #$01
 2401                                 lda \2,y
 2402                                 sbc \1 + 1
 2403                                 sta \2,y
 2404                                     ply
 2405                             .endif
 2406                     
 2407                             .if (\?2=4)    ;indirect dest
 2408                                 lda \2
 2409                                 sec
 2410                                 sbc \1
 2411                                 sta \2
 2412                                     phy
 2413                                 ldy #$01
 2414                                 lda \2,y
 2415                                 sbc \1,y
 2416                                 sta \2,y
 2417                                     ply
 2418                             .endif
 2419                         .endif
 2420                     
 2421                     
 2422                         .endm
#[1]   vce_dump.asm
#[2]   ../base_func/video/video.inc
  100                         .include "../base_func/video/video.inc"
    1                     loadCellToVram  .macro
    2                     
    3                           .if (\# = 2)
    4                                 MAP_BANK.2 #(\1.cell) , MPR2
    5                                 VDC.reg MAWR, #\2
    6                                 VDC.reg VRWR
    7                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
    8                           .endif
    9                     
   10                           .if (\# = 1)
   11                                 MAP_BANK.2 #(\1.cell) , MPR2
   12                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   13                           .endif
   14                       .endm
   15                     
   16                     loadCellToCram.BG  .macro
   17                     
   18                             MAP_BANK.2 #(\1.pal) , MPR2
   19                             VCE.BGblock \2
   20                             DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   21                       .endm
   22                     
   23                     loadCellToCram.SPR  .macro
   24                     
   25                             MAP_BANK.2 #(\1.pal) , MPR2
   26                             VCE.SPRblock \2
   27                             DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   28                       .endm
   29                     
   30                     debugBENCH  .macro
   31                     .ifdef DEBUG_BENCHMARK
   32                           MAP_BANK.2 #(\1.pal) , MPR2
   33                           VCE.SPRblock \2
   34                           DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   35                     .endif
   36                       .endm
   37                     
   38                     loadDataToVram.4banks  .macro
   39                     
   40                             VDC.reg MAWR, #\2
   41                             VDC.reg VRWR
   42                             MAP_BANK.4 #(\1) , MPR2
   43                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   44                     
   45                       .endm
   46                     
   47                     loadDataToVram.3banks  .macro
   48                     
   49                             VDC.reg MAWR, #\2
   50                             VDC.reg VRWR
   51                             MAP_BANK.3 #(\1) , MPR2
   52                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   53                     
   54                       .endm
   55                     
   56                     loadDataToVram.2banks  .macro
   57                     
   58                             VDC.reg MAWR, #\2
   59                             VDC.reg VRWR
   60                             MAP_BANK.2 #(\1) , MPR2
   61                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   62                     
   63                       .endm
   64                     
   65                     loadDataToVram.1bank  .macro
   66                     
   67                             VDC.reg MAWR, #\2
   68                             VDC.reg VRWR
   69                             MAP_BANK #(\1) , MPR2
   70                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   71                     
   72                       .endm
   73                     
   74                     loadDataToVram  .macro
   75                     
   76                             VDC.reg MAWR, #\2
   77                             VDC.reg VRWR
   78                             MAP_BANK.2 #(\1) , MPR2
   79                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   80                     
   81                       .endm
   82                     
   83                     
   84                     loadDataToCram.BG  .macro
   85                     
   86                             MAP_BANK.4 #(\1) , MPR2
   87                             VCE.BGblock \2
   88                             DMA.word.port \1, Page.2, vce_data, \1.size
   89                       .endm
#[1]   vce_dump.asm
#[2]   ../base_func/video/vdc/vdc.inc
  101                         .include "../base_func/video/vdc/vdc.inc"
    1                     
#[3]   ..\base_func\video\vdc\equ.inc
    2                     include "..\base_func\video\vdc\equ.inc"
    1                     ; VDC REG equates
    2                     
    3           0000      MAWR   .equ    $00        ;Memory Access Write Reg
    4           0001      MARR   .equ    $01        ;Memory Access Read Reg
    5           0002      VRWR   .equ    $02        ;Vram Read/Write reg
    6           0002      VWR    .equ    $02        ;Vram Read/Write reg
    7           0002      VRR    .equ    $02        ;Vram Read/Write reg
    8           0005      CR     .equ    $05        ;Control Reg
    9           0006      RCR    .equ    $06        ;Raster Control Reg
   10           0007      BXR    .equ    $07        ;Background X(scroll) Reg
   11           0008      BYR    .equ    $08        ;Background Y(scroll) Reg
   12           0009      MWR    .equ    $09        ;Memory Access Width Reg
   13           000A      HSR    .equ    $0a        ;Horizontal Synchro Reg
   14           000B      HDR    .equ    $0b        ;Horizontal Display Reg
   15           000C      VSR    .equ    $0c        ;Vertical Synchro Reg
   16           000D      VDR    .equ    $0d        ;Vertical Display Reg
   17           000E      VDE    .equ    $0e        ;Vertical Display End Reg
   18           000F      DCR    .equ    $0f        ;DMA Control Reg
   19           0010      DSR    .equ    $10        ;DMA Source Address Reg
   20           0011      DDR    .equ    $11        ;DMA Destination Address Reg
   21           0012      DBR    .equ    $12        ;DMA Block Length Reg
   22           0013      SATB   .equ    $13        ;VRAM-SATB Source Address Reg
   23                     
   24                     
   25                     ;VDC ports
   26           0000      vreg_port    = $0000
   27           0002      vdata_port   = $0002
   28           0002      vdata_port.l = $0002
   29           0003      vdata_port.h = $0003
   30                     
   31                     ;VDC CR reg arguments
   32           0080      BG_ON    = $0080
   33           0000      BG_OFF   = $0000
   34           0040      SPR_ON   = $0040
   35           0000      SPR_OFF  = $0000
   36           0008      VINT_ON  = $0008
   37           0000      VINT_OFF = $0000
   38           0004      HINT_ON  = $0004
   39           0000      HINT_OFF = $0000
   40           0000      ALL_OFF  = $0000
   41                     
   42                     ;VDC vram increment
   43           0000      INC_1   = %00000000
   44           0008      INC_32  = %00001000
   45           0010      INC_64  = %00010000
   46           0018      INC_128 = %00011000
   47                     
   48                     ;VDC map sizes
   49           0000      SCR32_32  = %00000000
   50           0040      SCR32_64  = %01000000
   51           0010      SCR64_32  = %00010000
   52           0050      SCR64_64  = %01010000
   53           0020      SCR128_32 = %00100000
   54           0060      SCR128_64 = %01100000
   55                     
   56                     ;VDC DMA control
   57           0010      AUTO_SATB_ON  = $0010
   58           0000      AUTO_SATB_OFF = $0000
#[2]   ../base_func/video/vdc/vdc.inc
    3                     
    4                     ;//................................................................................
    5                     ;// MACROS
    6                     
    7                     
    8                     ;//................
    9                     WAITVBLANK        .macro
   10                             .if (\#=0)
   11                                 ldx #1
   12                             .endif
   13                     
   14                             .if (\#>0)
   15                                 ldx #\1
   16                             .endif
   17                     
   18                     
   19                             jsr __wait_vblank
   20                         .endm
   21                     
   22                     ;//................
   23                     VDC1    .macro            ;hardware I/O page must be mapped to the first bank
   24                     
   25                         stz $000E
   26                     
   27                         .endm
   28                     
   29                     
   30                     ;//................
   31                     VDC2    .macro            ;hardware I/O page must be mapped to the first bank
   32                     
   33                         inc $000E
   34                     
   35                         .endm
   36                     
   37                     ;//................
   38                     MAWR_ADDR .macro
   39                         st0 #$00
   40                         st1 #LOw(\1)
   41                         st2 #HIGH(\1)
   42                     
   43                         .endm
   44                     
   45                     ;//................
   46                     MARR_ADDR .macro
   47                         st0 #$01
   48                         st1 #LOw(\1)
   49                         st2 #HIGH(\1)
   50                     
   51                         .endm
   52                     
   53                     ;//................
   54                     VDC.data .macro
   55                         st0 #$02
   56                     
   57                         .endm
   58                     
   59                     ;//................
   60                     VDC.reg     .macro
   61                     
   62                         .if    (\?2=1)
   63                         st0 #\1
   64                         sta $0002
   65                         stz $0003
   66                         .endif
   67                     
   68                         .if    (\#=1)
   69                         st0 #\1
   70                         .endif
   71                     
   72                         .if    (\#=2 & \?2 = 2)
   73                         st0 #\1
   74                         st1 #LOW(\2)
   75                         st2 #HIGH(\2)
   76                          .endif
   77                     
   78                         .if    (\#=3 & \?2 = 6)
   79                         st0 #\1
   80                         lda \2
   81                         sta $0002
   82                         lda \3
   83                         sta $0003
   84                         .endif
   85                     
   86                         .if    (\#=2 & \?2 = 6)
   87                         st0 #\1
   88                         lda \2
   89                         sta $0002
   90                         lda \2+1
   91                         sta $0003
   92                         .endif
   93                     
   94                         .if    (\#=2 & \?2 = 3)
   95                         st0 #\1
   96                         lda \2
   97                         sta $0002
   98                         lda \2+1
   99                         sta $0003
  100                         .endif
  101                     
  102                         .endm
  103                     
  104                     ;//................
  105                     VDC2.reg .macro                ;macro for SuperGrafx
  106                     
  107                         .if    (\?2=1)
  108                         st0 #\1
  109                         sta $0012
  110                         stz $0013
  111                         .endif
  112                     
  113                         .if    (\#=1)
  114                         st0 #\1
  115                         .endif
  116                     
  117                         .if    (\#=2 & \?2 != 1)
  118                         st0 #\1
  119                         st1 #LOW(\2)
  120                         st2 #HIGH(\2)
  121                          .endif
  122                     
  123                         .if    (\#=3 & \?3 != 1)
  124                         st0 #\1
  125                         lda \2
  126                         sta $0012
  127                         lda \3
  128                         sta $0013
  129                         .endif
  130                     
  131                         .endm
  132                     
  133                     ;//................
  134                     LOAD_RCR .macro
  135                     
  136                         st0 #RCR
  137                         lda \1
  138                         clc
  139                         adc #$40
  140                         sta $0002
  141                         lda \1+1
  142                         adc #$00
  143                         sta $0003
  144                     
  145                         .endm
  146                     
  147                     ;//................
  148                     UPDATE_RCR .macro        ;this is for special H-line parallax scroll routine
  149                                     ; - destroys REG A
  150                         st0 #RCR
  151                         sta $0002
  152                         lda <RCR_MSB
  153                         sta $0003
  154                     
  155                          .endm
  156                     
  157                     ;//................
  158                     ST1.w .macro
  159                     
  160                          st1 #LOW(\1)
  161                          st2 #HIGH(\1)
  162                     
  163                         .endm
  164                     
  165                     ;//................
  166                     MOVE.YA.port .macro
  167                     
  168                          sta $0002
  169                          sty $0003
  170                     
  171                         .endm
  172                     
  173                     ;//................
  174                     MOVE.YA.port2 .macro
  175                     
  176                          sta $0012
  177                          sty $0013
  178                     
  179                         .endm
  180                     
  181                     
  182                     ;//................
  183                     VREG_Select .macro
  184                     
  185                         st0 #\1
  186                         lda #\1
  187                         sta <vdc_reg
  188                     
  189                         .endm
  190                     
  191                     
  192                     ;//................
  193                     sVDC_REG     .macro
  194                     
  195                         .if    (\?2=1)
  196                         lda #\1
  197                         sta <vdc_reg
  198                         st0 #\1
  199                         sta $0002
  200                         stz $0003
  201                         .endif
  202                     
  203                         .if    (\#=1)
  204                         lda #\1
  205                         sta <vdc_reg
  206                         st0 #\1
  207                         .endif
  208                     
  209                         .if    (\#=2 & \?2 != 1)
  210                         lda #\1
  211                         sta <vdc_reg
  212                         st0 #\1
  213                         st1 #LOW(\2)
  214                         st2 #HIGH(\2)
  215                          .endif
  216                     
  217                         .if    (\#=3 & \?3 != 1)
  218                         lda #\1
  219                         sta <vdc_reg
  220                         st0 #\1
  221                         lda \2
  222                         sta $0002
  223                         lda \3
  224                         sta $0003
  225                         .endif
  226                     
  227                         .endm
  228                     
  229                     ;//................
  230                     iVDC_PORT     .macro
  231                     
  232                         st1 #LOW(\1)
  233                         st2 #HIGH(\1)
  234                     
  235                         .endm
  236                     
  237                     ;//................
  238                     sVDC_INC     .macro
  239                     
  240                         lda #$05
  241                         sta <vdc_reg
  242                         st0 #$05
  243                         st2 #\1
  244                     
  245                         .endm
  246                     
#[1]   vce_dump.asm
#[2]   ../base_func/video/vdc/sprites/sprites.inc
  102                         .include "../base_func/video/vdc/sprites/sprites.inc"
    1                     
    2                     ;//...............................
    3                     DMASprites: .macro
    4                         call SATB.dma
    5                         .endm
    6                     
    7                     ;//...............................
    8                     ResetSprites: .macro
    9                         call SATB.reset
   10                         .endm
   11                     
   12                     
   13                     ;//...............................
   14                     HideAllSprites: .macro
   15                         .endm
   16                     
   17                     
   18                     ;//...............................
   19                     ReorderAllSprites: .macro
   20                         .endm
   21                     
   22                     
   23                     ;//...............................
   24                     HideSingleSprite: .macro
   25                         .endm
   26                     
   27                     
   28                     ;//...............................
   29                     ShowSingleSprite: .macro
   30                         .endm
   31                     
   32                     ;//...............................
   33                     SetSpriteAddr: .macro
   34                         lda #low(\1)
   35                         sta SATB.vramAddr
   36                         lda #high(\1)
   37                         sta SATB.vramAddr+1
   38                         .endm
   39                     
#[1]   vce_dump.asm
#[2]   ../base_func/video/vce/vce.inc
  103                         .include "../base_func/video/vce/vce.inc"
    1                     
#[3]   ..\base_func\video\vce\equ.inc
    2                     include "..\base_func\video\vce\equ.inc"
    1                     
    2                     ; VCE resolution
    3           0000      LO_RES   			= %00000000		;5.369mhz
    4           0000      LOW_RES  			= %00000000		;5.369mhz
    5           0001      MID_RES  			= %00000001		;7.159mhz
    6           0002      HI_RES   			= %00000010		;10.739mhz
    7           0004      H_FILTER_ON 	= %00000100		;263 scanline
    8           0000      H_FILTER_OFF	= %00000000		;262 scanline
    9           0080      BW_MODE				= %10000000		;no color burst signal
   10           0000      COLOR_MODE		= %00000000		;color burst signal
   11                     
   12                     
   13                     ;VCE ports
   14           0400      vce_cntrl  = $400
   15           0402      vce_clr	   = $402
   16           0402      vce_clr.l  = $402
   17           0403      vce_clr.h  = $403
   18           0404      vce_data   = $404
   19           0404      vce_data.l = $404
   20           0405      vce_data.h = $405
#[2]   ../base_func/video/vce/vce.inc
    3                     
    4                     ;//................................................................................
    5                     ;// MACROS
    6                     
    7                     
    8                     ;................................................
    9                     VCE.BGcolor .macro
   10                     
   11                     	lda #(\1)
   12                     	sta $402
   13                     	stz $403
   14                     
   15                     	.endm
   16                     
   17                     ;................................................
   18                     VCE.BGblock .macro
   19                     
   20                     	lda #(\1 << 4)
   21                     	sta $402
   22                     	stz $403
   23                     
   24                     	.endm
   25                     
   26                     ;................................................
   27                     VCE.SPRcolor .macro
   28                     
   29                     	lda #(\1)
   30                     	sta $402
   31                     	lda #$01
   32                     	sta $403
   33                     
   34                     	.endm
   35                     
   36                     ;................................................
   37                     VCE.SPRblock .macro
   38                     
   39                     	lda #(\1 << 4)
   40                     	sta $402
   41                     	lda #$01
   42                     	sta $403
   43                     
   44                     	.endm
   45                     
   46                     ;................................................
   47                     VCE.reg .macro
   48                     
   49                     	lda #(\1)
   50                     	sta $400
   51                     
   52                     	.endm
   53                     
   54                     
   55                     
   56                     ;//................................................................................
   57                     ;// FUNCTIONS
#[1]   vce_dump.asm
#[2]   ../base_func/timer/timer.inc
  104                         .include "../base_func/timer/timer.inc"
    1                     
    2                     
#[3]   ..\base_func\timer\equ.inc
    3                     include "..\base_func\timer\equ.inc"
    1                      
    2                     ;TIMER ports
    3           0C01      TMR_CMD 	 = $c01
    4           0C00      TMR_PORT 	 = $c00
    5           0001      TMR_ON		 = $01
    6           0000      TMR_OFF		 = $00
    7                     
    8           0000      _7.00khz     = 0
    9           0001      _3.50kha     = 1
   10           0002      _2.33kha     = 2
   11           0003      _1.75kha     = 3
#[2]   ../base_func/timer/timer.inc
    4                     
    5                     ;................................................
    6                     TIMER.reg        .macro
    7                             lda #\2
    8                             sta \1
    9                         .endm
   10                     
   11                     ;................................................
   12                     TIMER.cmd    .macro
   13                             lda #\1
   14                             sta TMR_CMD
   15                         .endm
   16                     
   17                     ;................................................
   18                     TIMER.port    .macro
   19                             lda #\1
   20                             sta TMR_PORT
   21                         .endm
   22                     
#[1]   vce_dump.asm
#[2]   ../base_func/IO/irq_controller/irq.inc
  105                         .include "../base_func/IO/irq_controller/irq.inc"
    1                     
#[3]   ..\base_func\IO\irq_controller\equ.inc
    2                     include "..\base_func\IO\irq_controller\equ.inc"
    1                     ; IRQ mask 
    2           0000      IRQ2_ON =  %00000000
    3           0000      VIRQ_ON =  %00000000
    4           0000      TIRQ_ON =  %00000000
    5           0001      IRQ2_OFF = %00000001
    6           0002      VIRQ_OFF = %00000010
    7           0004      TIRQ_OFF = %00000100
    8                     
    9                     
   10           0001      VDC_VEC   = $01
   11           0002      BRK_VEC   = $02
   12           0004      TIMER_VEC = $04
   13           0008      VDC_VSYNC = $08
   14           0010      VDC_HSYNC = $10
   15                     
   16           1403      IRQ.ackTIRQ = $1403
   17           0000      IRQ.ackVDC  = $0000
   18                     
   19                     
   20                     
#[2]   ../base_func/IO/irq_controller/irq.inc
    3                     
    4                     ;................................................
    5                     IRQ.control     .macro
    6                     
    7                         lda #\1
    8                         sta $1402
    9                     
   10                         .endm
   11                     
   12                     
   13                     ;................................................
   14                     ISR.setVecMask   .macro
   15                     
   16                         lda #\1
   17                         tsb <vector_mask
   18                     
   19                       .endm
   20                     
   21                     ;................................................
   22                     ISR.resetVecMask   .macro
   23                     
   24                         lda #(\1 ^ 0xff)
   25                         trb <vector_mask
   26                     
   27                       .endm
   28                     
   29                     ;................................................
   30                     ISR.setVector   .macro
   31                     
   32                         php
   33                         sei
   34                     
   35                         ; Convert {1,2,4,8,16} to {0,2,4,6,8}
   36                         .if ( \1 = 1 | \1 = 2 | \1 = 4 | \1 = 8 | \1 = 16 )
   37                             if ( \1 = 1 )
   38                               ldx #0
   39                             .endif
   40                             if ( \1 = 2 )
   41                               ldx #2
   42                             .endif
   43                             if ( \1 = 4 )
   44                               ldx #4
   45                             .endif
   46                             if ( \1 = 8 )
   47                               ldx #6
   48                             .endif
   49                             if ( \1 = 16 )
   50                               ldx #8
   51                             .endif
   52                         .else
   53                           .fail Value needs to be 1,2,4,8, or 16
   54                         .endif
   55                     
   56                         lda #<\2
   57                         sta <irq_vector_list,x
   58                         lda #>\2
   59                         sta <irq_vector_list+1,x
   60                         plp
   61                     
   62                       .endm
   63                     
#[1]   vce_dump.asm
#[2]   ../base_func/IO/mapper/mapper.inc
  106                         .include "../base_func/IO/mapper/mapper.inc"
    1                     
#[3]   ..\base_func\IO\mapper\equ.inc
    2                         .include "..\base_func\IO\mapper\equ.inc"
    1                     
    2           0000      Page.0  = $0000
    3           2000      Page.1  = $2000
    4           4000      Page.2  = $4000
    5           6000      Page.3  = $6000
    6           8000      Page.4  = $8000
    7           A000      Page.5  = $A000
    8           C000      Page.6  = $C000
    9           D000      Page.7  = $D000
#[2]   ../base_func/IO/mapper/mapper.inc
    3                     
    4                         
#[1]   vce_dump.asm
#[2]   ../base_func/audio/wsg/wsg.inc
  107                         .include "../base_func/audio/wsg/wsg.inc"
#[3]   ../base_func/audio/wsg/equ.inc
    1                         .include "../base_func/audio/wsg/equ.inc"
    1                     
    2           0800      WSG.ChannelSelect = $800
    3                     
    4           0801      WSG.globalPanVol  = $801
    5           0805      WSG.ChannelPanVol = $805
    6                     
    7           0802      WSG.Frequency.lo  = $802
    8           0803      WSG.Frequency.hi  = $803
    9                     
   10           0804      WSG.Control       = $804
   11                     
   12           0806      WSG.DDAport       = $806
   13           0806      WSG.SamplePort    = $806
   14                     
   15           0807      WSG.NoiseControl  = $807
   16                     
   17           0808      WSG.LFO.frequency = $808
   18           0809      WSG.LFO.control   = $809
   19                     
   20                     
   21           0080      WSG_CHAN_ON       = %10000000
   22           0000      WSG_CHAN_OFF      = %00000000
   23           0040      WSG_MODE_DDA      = %01000000
   24           0000      WSG_MODE_WSG      = %00000000
   25           0080      WSG_NOISE_ON      = %10000000
   26           0000      WSG_NOISE_OFF     = %00000000
   27           0000      WSG_LFO_ON        = %00000000
   28           0080      WSG_LFO_OFF       = %10000000
   29                     
   30                     
   31           0000      WSG_NOISE_FREQ_1.80KHZ  = $00
   32           0001      WSG_NOISE_FREQ_1.86KHZ  = $01
   33           0002      WSG_NOISE_FREQ_1.93KHZ  = $02
   34           0003      WSG_NOISE_FREQ_1.99KHZ  = $03
   35           0004      WSG_NOISE_FREQ_2.07KHZ  = $04
   36           0005      WSG_NOISE_FREQ_2.15KHZ  = $05
   37           0006      WSG_NOISE_FREQ_2.24KHZ  = $06
   38           0007      WSG_NOISE_FREQ_2.33KHZ  = $07
   39           0008      WSG_NOISE_FREQ_2.43KHZ  = $08
   40           0009      WSG_NOISE_FREQ_2.54KHZ  = $09
   41           000A      WSG_NOISE_FREQ_2.66KHZ  = $0A
   42           000B      WSG_NOISE_FREQ_2.80KHZ  = $0B
   43           000C      WSG_NOISE_FREQ_2.94KHZ  = $0C
   44           000D      WSG_NOISE_FREQ_3.11KHZ  = $0D
   45           000E      WSG_NOISE_FREQ_3.29KHZ  = $0E
   46           000F      WSG_NOISE_FREQ_3.50KHZ  = $0F
   47           0010      WSG_NOISE_FREQ_3.73KHZ  = $10
   48           0011      WSG_NOISE_FREQ_3.99KHZ  = $11
   49           0012      WSG_NOISE_FREQ_4.30KHZ  = $12
   50           0013      WSG_NOISE_FREQ_4.66KHZ  = $13
   51           0014      WSG_NOISE_FREQ_5.08KHZ  = $14
   52           0015      WSG_NOISE_FREQ_5.60KHZ  = $15
   53           0016      WSG_NOISE_FREQ_6.21KHZ  = $16
   54           0017      WSG_NOISE_FREQ_6.99KHZ  = $17
   55           0018      WSG_NOISE_FREQ_7.99KHZ  = $18
   56           0019      WSG_NOISE_FREQ_9.32KHZ  = $19
   57           001A      WSG_NOISE_FREQ_11.19KHZ  = $1A
   58           001B      WSG_NOISE_FREQ_13.98KHZ  = $1B
   59           001C      WSG_NOISE_FREQ_18.64KHZ  = $1C
   60           001D      WSG_NOISE_FREQ_27.97KHZ  = $1D
   61           001E      WSG_NOISE_FREQ_55.93KHZ  = $1E
   62           001F      WSG_NOISE_FREQ_0.00KHZ   = $1f
   63                     
   64                     
   65           0000      WSG_PAN_LEFT_0   = $00
   66           0010      WSG_PAN_LEFT_1   = $10
   67           0020      WSG_PAN_LEFT_2   = $20
   68           0030      WSG_PAN_LEFT_3   = $30
   69           0040      WSG_PAN_LEFT_4   = $40
   70           0050      WSG_PAN_LEFT_5   = $50
   71           0060      WSG_PAN_LEFT_6   = $60
   72           0070      WSG_PAN_LEFT_7   = $70
   73           0080      WSG_PAN_LEFT_8   = $80
   74           0090      WSG_PAN_LEFT_9   = $90
   75           00A0      WSG_PAN_LEFT_10  = $A0
   76           00B0      WSG_PAN_LEFT_11  = $B0
   77           00C0      WSG_PAN_LEFT_12  = $C0
   78           00D0      WSG_PAN_LEFT_13  = $D0
   79           00E0      WSG_PAN_LEFT_14  = $E0
   80           00F0      WSG_PAN_LEFT_15  = $F0
   81                     
   82                     
   83           0000      WSG_PAN_RIGHT_0  = $00
   84           0001      WSG_PAN_RIGHT_1  = $01
   85           0002      WSG_PAN_RIGHT_2  = $02
   86           0003      WSG_PAN_RIGHT_3  = $03
   87           0004      WSG_PAN_RIGHT_4  = $04
   88           0005      WSG_PAN_RIGHT_5  = $05
   89           0006      WSG_PAN_RIGHT_6  = $06
   90           0007      WSG_PAN_RIGHT_7  = $07
   91           0008      WSG_PAN_RIGHT_8  = $08
   92           0009      WSG_PAN_RIGHT_9  = $09
   93           000A      WSG_PAN_RIGHT_10 = $0A
   94           000B      WSG_PAN_RIGHT_11 = $0B
   95           000C      WSG_PAN_RIGHT_12 = $0C
   96           000D      WSG_PAN_RIGHT_13 = $0D
   97           000E      WSG_PAN_RIGHT_14 = $0E
   98           000F      WSG_PAN_RIGHT_15 = $0F
   99                     
#[2]   ../base_func/audio/wsg/wsg.inc
#[1]   vce_dump.asm
#[2]   ../base_func/IO/gamepad/gamepad.inc
  108                         .include "../base_func/IO/gamepad/gamepad.inc"
    1                     
#[3]   ../base_func/IO/gamepad/equ.inc
    2                         .include "../base_func/IO/gamepad/equ.inc"
#[2]   ../base_func/IO/gamepad/gamepad.inc
    3                     
    4                     
#[1]   vce_dump.asm
  109                     
#[2]   ../lib/controls/controls.inc
  110                         .include "../lib/controls/controls.inc"
    1                     
#[3]   ../lib/controls/equ.inc
    2                         .include "../lib/controls/equ.inc"
    1                     
    2                     
    3           251F      input_state.buttons    = input_state
    4           2520      input_state.directions = input_state+1
    5                     
    6           0003      control.b1.mask     = %00000011
    7           0002      control.b1.held     = %00000010
    8           0003      control.b1.pressed  = %00000011
    9           0001      control.b1.released = %00000001
   10           0000      control.b1.inactive = %00000000
   11                     
   12           000C      control.b2.mask     = %00001100
   13           0008      control.b2.held     = %00001000
   14           000C      control.b2.pressed  = %00001100
   15           0004      control.b2.released = %00000100
   16           0000      control.b2.inactive = %00000000
   17                     
   18           0030      control.st.mask     = %00110000
   19           0020      control.st.held     = %00100000
   20           0030      control.st.pressed  = %00110000
   21           0010      control.st.released = %00010000
   22           0000      control.st.inactive = %00000000
   23                     
   24           00C0      control.sl.mask     = %11000000
   25           0080      control.sl.held     = %10000000
   26           00C0      control.sl.pressed  = %11000000
   27           0040      control.sl.released = %01000000
   28           0000      control.sl.inactive = %00000000
   29                     
   30           0003      control.up.mask     = %00000011
   31           0002      control.up.held     = %00000010
   32           0003      control.up.pressed  = %00000011
   33           0001      control.up.released = %00000001
   34           0000      control.up.inactive = %00000000
   35                     
   36           000C      control.dn.mask     = %00001100
   37           0008      control.dn.held     = %00001000
   38           000C      control.dn.pressed  = %00001100
   39           0004      control.dn.released = %00000100
   40           0000      control.dn.inactive = %00000000
   41                     
   42           0030      control.lf.mask     = %00110000
   43           0020      control.lf.held     = %00100000
   44           0030      control.lf.pressed  = %00110000
   45           0010      control.lf.released = %00010000
   46           0000      control.lf.inactive = %00000000
   47                     
   48           00C0      control.rh.mask     = %11000000
   49           0080      control.rh.held     = %10000000
   50           00C0      control.rh.pressed  = %11000000
   51           0040      control.rh.released = %01000000
   52           0000      control.rh.inactive = %00000000
   53                     
#[2]   ../lib/controls/controls.inc
    3                     
#[1]   vce_dump.asm
#[2]   ../lib/HsyncISR/hsync.inc
  111                         .include "../lib/HsyncISR/hsync.inc"
    1                     
#[3]   ../lib/controls/equ.inc
    2                         .include "../lib/controls/equ.inc"
    1                     
    2                     
    3           251F      input_state.buttons    = input_state
    4           2520      input_state.directions = input_state+1
    5                     
    6           0003      control.b1.mask     = %00000011
    7           0002      control.b1.held     = %00000010
    8           0003      control.b1.pressed  = %00000011
    9           0001      control.b1.released = %00000001
   10           0000      control.b1.inactive = %00000000
   11                     
   12           000C      control.b2.mask     = %00001100
   13           0008      control.b2.held     = %00001000
   14           000C      control.b2.pressed  = %00001100
   15           0004      control.b2.released = %00000100
   16           0000      control.b2.inactive = %00000000
   17                     
   18           0030      control.st.mask     = %00110000
   19           0020      control.st.held     = %00100000
   20           0030      control.st.pressed  = %00110000
   21           0010      control.st.released = %00010000
   22           0000      control.st.inactive = %00000000
   23                     
   24           00C0      control.sl.mask     = %11000000
   25           0080      control.sl.held     = %10000000
   26           00C0      control.sl.pressed  = %11000000
   27           0040      control.sl.released = %01000000
   28           0000      control.sl.inactive = %00000000
   29                     
   30           0003      control.up.mask     = %00000011
   31           0002      control.up.held     = %00000010
   32           0003      control.up.pressed  = %00000011
   33           0001      control.up.released = %00000001
   34           0000      control.up.inactive = %00000000
   35                     
   36           000C      control.dn.mask     = %00001100
   37           0008      control.dn.held     = %00001000
   38           000C      control.dn.pressed  = %00001100
   39           0004      control.dn.released = %00000100
   40           0000      control.dn.inactive = %00000000
   41                     
   42           0030      control.lf.mask     = %00110000
   43           0020      control.lf.held     = %00100000
   44           0030      control.lf.pressed  = %00110000
   45           0010      control.lf.released = %00010000
   46           0000      control.lf.inactive = %00000000
   47                     
   48           00C0      control.rh.mask     = %11000000
   49           0080      control.rh.held     = %10000000
   50           00C0      control.rh.pressed  = %11000000
   51           0040      control.rh.released = %01000000
   52           0000      control.rh.inactive = %00000000
   53                     
#[2]   ../lib/HsyncISR/hsync.inc
    3                     
    4                     
#[1]   vce_dump.asm
#[2]   ../lib/control_vars/control.inc
  112                         .include "../lib/control_vars/control.inc"
#[3]   ../lib/control_vars/equ.inc
    1                         .include "../lib/control_vars/equ.inc"
#[2]   ../lib/control_vars/control.inc
#[1]   vce_dump.asm
#[2]   ../lib/random/16bit/random_16bit.inc
  113                         .include "../lib/random/16bit/random_16bit.inc"
    1                     
    2                     
    3                     
    4                     
    5                     Random.seed .macro
    6                     
    7                           .if (\?1=2)
    8                               lda #low(\1)
    9                               sta random.RNG.lo
   10                               lda #high(\1)
   11                               sta random.RNG.hi
   12                           .endif
   13                     
   14                           .if (\?1=1)
   15                               sta random.RNG.lo
   16                               stx random.RNG.hi
   17                           .endif
   18                     
   19                           .if (\?1=3)
   20                               lda \1
   21                               sta random.RNG.lo
   22                               lda \1+1
   23                               sta random.RNG.hi
   24                           .endif
   25                     
   26                           .if (\?1=3)
   27                               lda \1
   28                               sta random.RNG.lo
   29                               lda \1+1
   30                               sta random.RNG.hi
   31                           .endif
   32                     
   33                           .if (\?1=6)
   34                               lda \1
   35                               sta random.RNG.lo
   36                               lda \1+1
   37                               sta random.RNG.hi
   38                           .endif
   39                     
   40                           .if (\?1=4)
   41                               lda [\1]
   42                               sta random.RNG.lo
   43                               ldy #$01
   44                               lda [\1],y
   45                               sta random.RNG.hi
   46                           .endif
   47                     
   48                     
   49                       .endm
   50                     
#[1]   vce_dump.asm
  114                     
#[2]   ../general/general.inc
  115                         .include "../general/general.inc"
#[3]   ../general/equ.inc
    1                     include "../general/equ.inc"
#[2]   ../general/general.inc
#[1]   vce_dump.asm
  116                     
  117                     
  118                     ;/////////////////////////////////////////////////////////////////////////////////
  119                     ;/////////////////////////////////////////////////////////////////////////////////
  120                     ;/////////////////////////////////////////////////////////////////////////////////
  121                     ;
  122                     ;// Startup and fix lib @$E000
  123                     
  124  00:E000            startup:
  125                             ;................................
  126                             ;Main initialization routine.
  127                             InitialStartup
                          
       00:E000  78                        sei
       00:E001  D8                        cld
       00:E002  D4                        csh
       00:E003  A2 FF                     ldx #$ff
       00:E005  9A                        txs
       00:E006  A9 FF                     lda #$ff
       00:E008  53 01                     tam #$00
       00:E00A  A9 F8                     lda #$f8
       00:E00C  53 02                     tam #$01
                          
  128                             CallFarWide init_audio
       00:E00E  43 10                     tma #page(init_audio)
       00:E010  48                        pha
       00:E011  43 20                     tma #page(init_audio) + 1
       00:E013  48                        pha
                          
       00:E014  A9 02                     lda #bank(init_audio)
       00:E016  53 10                     tam #page(init_audio)
       00:E018  1A                        inc a
       00:E019  53 20                     tam #page(init_audio) + 1
       00:E01B  20 30 8C                  jsr init_audio
                          
       00:E01E  68                        pla
       00:E01F  53 20                     tam #page(init_audio) + 1
       00:E021  68                        pla
       00:E022  53 10                     tam #page(init_audio)
                          
  129                             CallFarWide init_video
       00:E024  43 10                     tma #page(init_video)
       00:E026  48                        pha
       00:E027  43 20                     tma #page(init_video) + 1
       00:E029  48                        pha
                          
       00:E02A  A9 02                     lda #bank(init_video)
       00:E02C  53 10                     tam #page(init_video)
       00:E02E  1A                        inc a
       00:E02F  53 20                     tam #page(init_video) + 1
       00:E031  20 54 8C                  jsr init_video
                          
       00:E034  68                        pla
       00:E035  53 20                     tam #page(init_video) + 1
       00:E037  68                        pla
       00:E038  53 10                     tam #page(init_video)
                          
  130                     
  131  00:E03A  9C 00 20          stz $2000
  132  00:E03D  73 00 20          tii $2000,$2001,$2000
       00:E040  01 20 00  
       00:E043  20        
  133                     
  134                     
  135                             VCE.reg LO_RES|H_FILTER_ON
                          
       00:E044  A9 04     	lda #(LO_RES|H_FILTER_ON)
       00:E046  8D 00 04  	sta $400
                          
  136                             VDC.reg HSR  , #$0202
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E049  03 0A         st0 #HSR
       00:E04B  13 02         st1 #LOW(#$0202)
       00:E04D  23 02         st2 #HIGH(#$0202)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  137                             VDC.reg HDR  , #$041f
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E04F  03 0B         st0 #HDR
       00:E051  13 1F         st1 #LOW(#$041f)
       00:E053  23 04         st2 #HIGH(#$041f)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  138                             VDC.reg VSR  , #$1002
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E055  03 0C         st0 #VSR
       00:E057  13 02         st1 #LOW(#$1002)
       00:E059  23 10         st2 #HIGH(#$1002)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  139                             VDC.reg VDR  , #$00e6
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E05B  03 0D         st0 #VDR
       00:E05D  13 E6         st1 #LOW(#$00e6)
       00:E05F  23 00         st2 #HIGH(#$00e6)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  140                             VDC.reg VDE  , #$001f
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E061  03 0E         st0 #VDE
       00:E063  13 1F         st1 #LOW(#$001f)
       00:E065  23 00         st2 #HIGH(#$001f)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  141                             VDC.reg DCR  , #AUTO_SATB_ON
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E067  03 0F         st0 #DCR
       00:E069  13 10         st1 #LOW(#AUTO_SATB_ON)
       00:E06B  23 00         st2 #HIGH(#AUTO_SATB_ON)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  142                             VDC.reg CR   , #$0000
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E06D  03 05         st0 #CR
       00:E06F  13 00         st1 #LOW(#$0000)
       00:E071  23 00         st2 #HIGH(#$0000)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  143                             VDC.reg SATB , #$0800
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E073  03 13         st0 #SATB
       00:E075  13 00         st1 #LOW(#$0800)
       00:E077  23 08         st2 #HIGH(#$0800)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  144                             VDC.reg MWR  , #SCR64_32
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E079  03 09         st0 #MWR
       00:E07B  13 10         st1 #LOW(#SCR64_32)
       00:E07D  23 00         st2 #HIGH(#SCR64_32)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  145                     
  146                             IRQ.control IRQ2_ON|VIRQ_ON|TIRQ_OFF
                          
       00:E07F  A9 04         lda #IRQ2_ON|VIRQ_ON|TIRQ_OFF
       00:E081  8D 02 14      sta $1402
                          
  147                     
  148                             TIMER.port  _7.00khz
       00:E084  A9 00             lda #_7.00khz
       00:E086  8D 00 0C          sta TMR_PORT
  149                             TIMER.cmd   TMR_OFF
       00:E089  A9 00             lda #TMR_OFF
       00:E08B  8D 01 0C          sta TMR_CMD
  150                     
  151                             MAP_BANK #MAIN, MPR6
                          
                0001          .if (2=2)
       00:E08E  A9 01         lda #bank(#MAIN)
       00:E090  53 40         tam #(MPR6)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
  152  00:E092  4C 00 C0          jmp MAIN
  153                     
  154                     ;/////////////////////////////////////////////////////////////////////////////////
  155                     ;/////////////////////////////////////////////////////////////////////////////////
  156                     ;/////////////////////////////////////////////////////////////////////////////////
  157                     ;
  158                     ;// Data / fixed bank
  159                     
  160                     
  161                     ;Stuff for printing on screen
#[2]   ../base_func/video/print/lib.asm
  162                         .include "../base_func/video/print/lib.asm"
    1                     
#[3]   ..\base_func\video\print\print.inc
    2                     include "..\base_func\video\print\print.inc"
    1                     ;///////////////////////////////////////////////////////////////////////////////
    2                     ;///////////////////////////////////////////////////////////////////////////////
    3                     ;///////////////////////////////////////////////////////////////////////////////
    4                     ;
    5                     ; MACROS
    6                     ;
    7                     
    8                     PRINT_STR		.macro
    9                           lda #low(\1)
   10                           sta <R0
   11                           lda #high(\1)
   12                           sta <R0+1
   13                           lda #low((\3 * $40)+(\2 & $3f)
   14                           ldx #high((\3 * $40)+(\2 & $3f)
   15                      			clc
   16                           jsr PrintString
   17                     	.endm
   18                     
   19                     
   20                     
   21                     PRINT_STR_q		.macro
   22                           lda #low((\2 * $40)+(\1 & $3f))
   23                           ldx #high((\2 * $40)+(\1 & $3f))
   24                     			clc
   25                           jsr PrintString
   26                     	.endm
   27                     
   28                     PRINT_STR_s		.macro
   29                     			lda \1
   30                     			and #$3f
   31                     			sta <D7
   32                     			lda \2
   33                     			asl a
   34                     			asl a
   35                     			asl a
   36                     			asl a
   37                     			asl a
   38                     			asl a
   39                     			clc
   40                     			adc <D7
   41                     			sax
   42                     			lda \2
   43                     			lsr a
   44                     			lsr a
   45                     			sax
   46                     			clc
   47                           jsr PrintString
   48                     	.endm
   49                     
   50                     
   51                     PRINT_STR_a		.macro
   52                     			sec
   53                           jsr PrintString
   54                     	.endm
   55                     
   56                     PRINT_STR_a_ptr		.macro
   57                           lda #low(\1)
   58                           sta <R0
   59                           lda #high(\1)
   60                           sta <R0+1
   61                     			sec
   62                           jsr PrintString
   63                     	.endm
   64                     
   65                     PRINT_STR_i   .macro
   66                           bra .y_\@
   67                     .x_\@:
   68                           .db \1,0
   69                     .y_\@:
   70                           lda #low(.x_\@)
   71                           sta <R0
   72                           lda #high(.x_\@)
   73                           sta <R0+1
   74                     			lda #low((\3 * $40)+(\2 & $3f))
   75                     			ldx #high((\3 * $40)+(\2 & $3f))
   76                           clc
   77                           jsr PrintString
   78                       .endm
   79                     
   80                     
   81                     PRINT_STR_i_a   .macro
   82                           bra .y_\@
   83                     .x_\@:
   84                           .db \1,0
   85                     .y_\@:
   86                           lda #low(.x_\@)
   87                           sta <R0
   88                           lda #high(.x_\@)
   89                           sta <R0+1
   90                           sec
   91                           jsr PrintString
   92                       .endm
   93                     
   94                     ;...........................................
   95                     
   96                     PRINT_BYTEdec		.macro
   97                           lda #low((\3 * $40)+(\2 & $3f))
   98                           ldx #high((\3 * $40)+(\2 & $3f))
   99                           ldy \1
  100                     			clc
  101                           jsr PrintByteDec
  102                     	.endm
  103                     
  104                     PRINT_BYTEdec_q		.macro
  105                           lda #low((\2 * $40)+(\1 & $3f))
  106                           ldx #high((\2 * $40)+(\1 & $3f))
  107                     			clc
  108                           jsr PrintByteDec
  109                     	.endm
  110                     
  111                     PRINT_BYTEdec_a_q		.macro
  112                     			ldy \1
  113                     			sec
  114                           jsr PrintByteDec
  115                     	.endm
  116                     
  117                     PRINT_BYTEhex_a_q		.macro
  118                     			ldy \1
  119                     			sec
  120                           jsr PrintByte
  121                     	.endm
  122                     
  123                     PRINT_BYTEhex		.macro
  124                           lda #low((\3 * $40)+(\2 & $3f))
  125                           ldx #high((\3 * $40)+(\2 & $3f))
  126                           ldy \1
  127                     			clc
  128                           jsr PrintByte
  129                     	.endm
  130                     
  131                     PRINT_BYTEhex_q		.macro
  132                           lda #low((\2 * $40)+(\1 & $3f))
  133                           ldx #high((\2 * $40)+(\1 & $3f))
  134                     			clc
  135                           jsr PrintByte
  136                     	.endm
  137                     
  138                     
  139                     PRINT_BYTEhex_XY:   .macro
  140                     
  141                         lda \2
  142                         clx
  143                         lsr a
  144                         sax
  145                         ror a
  146                         sax
  147                         lsr a
  148                         sax
  149                         ror a
  150                         clc
  151                         adc \1
  152                             clc
  153                             jsr PrintByte
  154                         .endm
  155                     
  156                     
  157                     PRINT_Space_XY:   .macro
  158                     
  159                         lda \2
  160                         clx
  161                         lsr a
  162                         sax
  163                         ror a
  164                         sax
  165                         lsr a
  166                         sax
  167                         ror a
  168                         clc
  169                         adc \1
  170                             ldy #$20
  171                             clc
  172                             jsr PrintChar
  173                         .endm
  174                     
  175                     
  176                     ;...........................................
  177                     PRINT_CHAR_s		.macro
  178                     			lda \1
  179                     			and #$3f
  180                     			sta <D7
  181                     			lda \2
  182                     			asl a
  183                     			asl a
  184                     			asl a
  185                     			asl a
  186                     			asl a
  187                     			asl a
  188                     			clc
  189                     			adc <D7
  190                     			sax
  191                     			lda \2
  192                     			lsr a
  193                     			lsr a
  194                     			sax
  195                     			clc
  196                           jsr PrintChar
  197                     	.endm
  198                     
  199                     
  200                     PRINT_CHAR		.macro
  201                           lda #low((\2 * $40)+(\1 & $3f))
  202                           ldx #high((\2 * $40)+(\1 & $3f))
  203                     			clc
  204                           jsr PrintChar
  205                     	.endm
  206                     
  207                     
  208                     PRINT_CHAR_a		.macro
  209                     			sec
  210                           jsr PrintChar
  211                     	.endm
  212                     
  213                     PRINT_CHAR_a_q		.macro
  214                     			ldy \1
  215                     			sec
  216                           jsr PrintChar
  217                     	.endm
  218                     
  219                     PRINT_CHAR_a_Acc		.macro
  220                     			tay
  221                     			sec
  222                           jsr PrintChar
  223                     	.endm
  224                     
  225                     PRINT_CHAR_a_X		.macro
  226                     			sxy
  227                     			sec
  228                           jsr PrintChar
  229                     	.endm
  230                     
  231                     ;...........................................
  232                     PRINT_DBYTEhex_a		.macro
  233                     			ldy \1+1
  234                     			sec
  235                           jsr PrintByte
  236                     			ldy \1
  237                     			sec
  238                           jsr PrintByte
  239                     	.endm
  240                     
  241                     
  242                     ;...........................................
  243                     
  244                     PRINT_STATUS	.macro
  245                     			lda #\2
  246                     			sta <D3
  247                     			lda #\3
  248                     			sta <D3+1
  249                     
  250                     			lda #low(\1)
  251                     			sta <A1
  252                     			lda #high(\1)
  253                     			sta <A1+1
  254                     
  255                     		jsr PrintStatus
  256                     	.endm
  257                     
  258                     
  259                     
  260                     
#[2]   ../base_func/video/print/lib.asm
    3                     
    4                     ;...............................................................................
    5                     ;//Print string ascii string
    6                     ;///////////////////////////
    7                     ; vram addr in X:A
    8                     ; string addr in R0
    9                     ;
   10  00:E095            PrintString:
   11  00:E095  B0 0A         bcs .skip
   12  00:E097  64 4C     	    stz <vdc_reg
   13  00:E099  03 00     	    st0 #$00
   14  00:E09B  8D 02 00  	    sta $0002
   15  00:E09E  8E 03 00  	    stx $0003
   16  00:E0A1            .skip
   17  00:E0A1  A9 02     	    lda #$02
   18  00:E0A3  85 4C     	    sta <vdc_reg
   19  00:E0A5  03 02     	    st0 #$02
   20  00:E0A7  C2        	    cly
   21                     
   22  00:E0A8            .ll01
   23  00:E0A8  B1 00     	    lda [R0],y
   24  00:E0AA  F0 0B     	  beq .out
   25  00:E0AC  38        	    sec
   26  00:E0AD  E9 20     	    sbc #$20
   27  00:E0AF  8D 02 00  	    sta $0002
   28  00:E0B2  23 01     	    st2 #$01
   29  00:E0B4  C8        	    iny
   30  00:E0B5  80 F1         bra .ll01
   31  00:E0B7            .out
   32  00:E0B7  60          rts
   33                     
   34                     
   35                     ;...............................................................................
   36                     ;//Print variable to x,y location
   37                     ;/ X:A vram addr
   38                     ;/ y=value
   39                     ;/ Carry; 1=append last location, 0=location in X:A
   40  00:E0B8            PrintByte:
   41  00:E0B8  B0 0A         bcs .skip
   42  00:E0BA  64 4C     	    stz <vdc_reg
   43  00:E0BC  03 00     	    st0 #$00
   44  00:E0BE  8D 02 00  	    sta $0002
   45  00:E0C1  8E 03 00  	    stx $0003
   46  00:E0C4            .skip
   47  00:E0C4  A9 02     	    lda #$02
   48  00:E0C6  85 4C     	    sta <vdc_reg
   49  00:E0C8  03 02     	    st0 #$02
   50  00:E0CA  98        	    tya
   51  00:E0CB  AA        	    tax
   52  00:E0CC  4A        	    lsr a
   53  00:E0CD  4A        	    lsr a
   54  00:E0CE  4A        	    lsr a
   55  00:E0CF  4A        	    lsr a
   56  00:E0D0  A8        	    tay
   57  00:E0D1  B9 46 E1  	    lda hex_conv,y
   58  00:E0D4  38        	    sec
   59  00:E0D5  E9 20     	    sbc #$20
   60  00:E0D7  8D 02 00  	    sta $0002
   61  00:E0DA  A9 01             lda #$01
   62  00:E0DC  0D 01 22          ora pal_color1
   63  00:E0DF  8D 03 00          sta $0003
   64  00:E0E2  8A        	    txa
   65  00:E0E3  29 0F     	    and #$0f
   66  00:E0E5  A8        	    tay
   67  00:E0E6  B9 46 E1  	    lda hex_conv,y
   68  00:E0E9  38        	    sec
   69  00:E0EA  E9 20     	    sbc #$20
   70  00:E0EC  8D 02 00  	    sta $0002
   71  00:E0EF  A9 01             lda #$01
   72  00:E0F1  0D 00 22          ora pal_color0
   73  00:E0F4  8D 03 00          sta $0003
   74  00:E0F7  60          rts
   75                     
   76  00:E0F8            print_lo_nibble:
   77  00:E0F8  B0 10         bcs .skip
   78  00:E0FA  64 4C     	    stz <vdc_reg
   79  00:E0FC  03 00     	    st0 #$00
   80  00:E0FE  8D 02 00  	    sta $0002
   81  00:E101  8E 03 00  	    stx $0003
   82  00:E104  A9 02     	    lda #$02
   83  00:E106  85 4C     	    sta <vdc_reg
   84  00:E108  03 02     	    st0 #$02
   85  00:E10A            .skip
   86  00:E10A  A8        	    tay
   87  00:E10B  29 0F     	    and #$0f
   88  00:E10D  A8        	    tay
   89  00:E10E  B9 46 E1  	    lda hex_conv,y
   90  00:E111  38        	    sec
   91  00:E112  E9 20     	    sbc #$20
   92  00:E114  8D 02 00  	    sta $0002
   93  00:E117  23 01     	    st2 #$01
   94  00:E119  60          rts
   95                     
   96  00:E11A            print_hi_nibble:
   97  00:E11A  B0 10         bcs .skip
   98  00:E11C  64 4C     	    stz <vdc_reg
   99  00:E11E  03 00     	    st0 #$00
  100  00:E120  8D 02 00  	    sta $0002
  101  00:E123  8E 03 00  	    stx $0003
  102  00:E126  A9 02     	    lda #$02
  103  00:E128  85 4C     	    sta <vdc_reg
  104  00:E12A  03 02     	    st0 #$02
  105  00:E12C            .skip
  106  00:E12C  A8        	    tay
  107  00:E12D  4A        	    lsr a
  108  00:E12E  4A        	    lsr a
  109  00:E12F  4A        	    lsr a
  110  00:E130  4A        	    lsr a
  111  00:E131  A8        	    tay
  112  00:E132  B9 46 E1  	    lda hex_conv,y
  113  00:E135  38        	    sec
  114  00:E136  E9 20     	    sbc #$20
  115  00:E138  8D 02 00  	    sta $0002
  116  00:E13B  23 01     	    st2 #$01
  117  00:E13D  60          rts
  118                     
  119  00:E13E            print_indent:
  120  00:E13E            .ll01
  121  00:E13E  13 00     	    st1 #$00
  122  00:E140  23 00     	    st2 #$00
  123  00:E142  88        	    dey
  124  00:E143  D0 F9         bne .ll01
  125  00:E145  60          rts
  126                     
  127                     ;near data table
  128  00:E146            hex_conv:
  129  00:E146  30 31 32      .db '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
       00:E149  33 34 35  
       00:E14C  36 37 38  
       00:E14F  39 41 42  
       00:E152  43 44 45  
       00:E155  46        
  130                     
  131                     
  132                     ;...............................................................................
  133                     ;//Clears the screen with blank space
  134                     ;/ Note: no arguments, no whining.
  135                     ;/ Note: This the 64x32 version.
  136  00:E156            ClearScreen:
  137  00:E156  03 00     			st0 #$00
  138  00:E158  13 00     			st1 #$00
  139  00:E15A  23 00     			st2 #$00
  140  00:E15C  03 02     			st0 #$02
  141  00:E15E  A9 02     			lda #$02
  142  00:E160  85 4C     			sta <vdc_reg
  143  00:E162  82        			clx
  144  00:E163  A0 08     			ldy #$08
  145  00:E165  13 00     			st1 #$00
  146  00:E167            .loop
  147  00:E167  23 01     			st2 #$01
  148  00:E169  E8        			inx
  149  00:E16A  D0 FB     		bne .loop
  150  00:E16C  88        			dey
  151  00:E16D  D0 F8     		bne .loop
  152  00:E16F  60        	rts
  153                     
  154                     ;...............................................................................
  155                     ;//Clears the screen with blank space
  156                     ;/ Note: no arguments, no whining.
  157                     ;/ Note: This the 64x32 version.
  158  00:E170            ClearScreen.32x32:
  159  00:E170  03 00     			st0 #$00
  160  00:E172  13 00     			st1 #$00
  161  00:E174  23 00     			st2 #$00
  162  00:E176  03 02     			st0 #$02
  163  00:E178  A9 02     			lda #$02
  164  00:E17A  85 4C     			sta <vdc_reg
  165  00:E17C  82        			clx
  166  00:E17D  A0 04     			ldy #$04
  167  00:E17F  13 00     			st1 #$00
  168  00:E181            .loop
  169  00:E181  23 01     			st2 #$01
  170  00:E183  E8        			inx
  171  00:E184  D0 FB     		bne .loop
  172  00:E186  88        			dey
  173  00:E187  D0 F8     		bne .loop
  174  00:E189  60        	rts
  175                     
  176                     ;...............................................................................
  177                     ;//Clears the screen with blank space
  178                     ;/ Note: no arguments, no whining.
  179                     ;/ Note: This the 64x32 version.
  180  00:E18A            ClearScreen.64x32:
  181  00:E18A  03 00     			st0 #$00
  182  00:E18C  13 00     			st1 #$00
  183  00:E18E  23 00     			st2 #$00
  184  00:E190  03 02     			st0 #$02
  185  00:E192  A9 02     			lda #$02
  186  00:E194  85 4C     			sta <vdc_reg
  187  00:E196  82        			clx
  188  00:E197  A0 08     			ldy #$08
  189  00:E199  13 00     			st1 #$00
  190  00:E19B            .loop
  191  00:E19B  23 01     			st2 #$01
  192  00:E19D  E8        			inx
  193  00:E19E  D0 FB     		bne .loop
  194  00:E1A0  88        			dey
  195  00:E1A1  D0 F8     		bne .loop
  196  00:E1A3  60        	rts
  197                     
  198                     ;...............................................................................
  199                     ;//Clears the screen with blank space
  200                     ;/ Note: no arguments, no whining.
  201                     ;/ Note: This the 64x32 version.
  202  00:E1A4            ClearScreen.64x64:
  203  00:E1A4  03 00     			st0 #$00
  204  00:E1A6  13 00     			st1 #$00
  205  00:E1A8  23 00     			st2 #$00
  206  00:E1AA  03 02     			st0 #$02
  207  00:E1AC  A9 02     			lda #$02
  208  00:E1AE  85 4C     			sta <vdc_reg
  209  00:E1B0  82        			clx
  210  00:E1B1  A0 10     			ldy #$10
  211  00:E1B3  13 00     			st1 #$00
  212  00:E1B5            .loop
  213  00:E1B5  23 01     			st2 #$01
  214  00:E1B7  E8        			inx
  215  00:E1B8  D0 FB     		bne .loop
  216  00:E1BA  88        			dey
  217  00:E1BB  D0 F8     		bne .loop
  218  00:E1BD  60        	rts
  219                     
  220                     ;...............................................................................
  221                     ;//Clears the screen with blank space
  222                     ;/ Note: no arguments, no whining.
  223                     ;/ Note: This the 64x32 version.
  224  00:E1BE            PrintByteDec:
  225                     
  226  00:E1BE  B0 0A         bcs .skip
  227  00:E1C0  64 4C     	    stz <vdc_reg
  228  00:E1C2  03 00     	    st0 #$00
  229  00:E1C4  8D 02 00  	    sta $0002
  230  00:E1C7  8E 03 00  	    stx $0003
  231  00:E1CA            .skip
  232  00:E1CA  A9 02     	    lda #$02
  233  00:E1CC  85 4C     	    sta <vdc_reg
  234  00:E1CE  03 02     	    st0 #$02
  235                     
  236  00:E1D0  98        			tya
  237  00:E1D1  C9 C8     			cmp #200
  238  00:E1D3  90 07     		bcc .not200
  239  00:E1D5  38        			sec
  240  00:E1D6  E9 C8     			sbc #200
  241  00:E1D8  A2 12     			ldx #$12
  242  00:E1DA  80 09     		bra .drawUpper
  243  00:E1DC            .not200
  244  00:E1DC  C9 64     			cmp #100
  245  00:E1DE  90 0A     		bcc .lowerDigits
  246  00:E1E0  38        			sec
  247  00:E1E1  E9 64     			sbc #100
  248  00:E1E3  A2 11     			ldx #$11
  249                     
  250  00:E1E5            .drawUpper
  251  00:E1E5  8E 02 00  	    stx $0002
  252  00:E1E8  23 01     	    st2 #$01
  253                     
  254  00:E1EA            .lowerDigits
  255  00:E1EA  C2        			cly
  256  00:E1EB  C9 0A     			cmp #10
  257  00:E1ED  90 08     		bcc .done
  258  00:E1EF            .loop
  259  00:E1EF  C8        			iny
  260  00:E1F0  38        			sec
  261  00:E1F1  E9 0A     			sbc #10
  262  00:E1F3  C9 0A     			cmp #10
  263  00:E1F5  B0 F8     		bcs .loop
  264  00:E1F7            .done
  265  00:E1F7  42        			say
  266  00:E1F8  18        			clc
  267  00:E1F9  69 10     			adc #$10
  268  00:E1FB  8D 02 00  			sta $0002
  269  00:E1FE  23 01     			st2 #$01
  270  00:E200  42        			say
  271  00:E201  18        			clc
  272  00:E202  69 10     			adc #$10
  273  00:E204  8D 02 00  			sta $0002
  274  00:E207  23 01     			st2 #$01
  275  00:E209  60        	rts
  276                     
  277                     ;...............................................................................
  278                     ;//Clears the screen with blank space
  279                     ;/ Note: no arguments, no whining.
  280                     ;/ Note: This the 64x32 version.
  281  00:E20A            PrintChar:
  282                     
  283  00:E20A  B0 0A         bcs .skip
  284  00:E20C  64 4C     	    stz <vdc_reg
  285  00:E20E  03 00     	    st0 #$00
  286  00:E210  8D 02 00  	    sta $0002
  287  00:E213  8E 03 00  	    stx $0003
  288  00:E216            .skip
  289  00:E216  A9 02     	    lda #$02
  290  00:E218  85 4C     	    sta <vdc_reg
  291  00:E21A  03 02     	    st0 #$02
  292                     
  293                     
  294  00:E21C  98        			tya
  295  00:E21D  38        			sec
  296  00:E21E  E9 20     			sbc #$20
  297  00:E220  8D 02 00  			sta $0002
  298  00:E223  23 01     			st2 #$01
  299  00:E225  60        	rts
  300                     
  301                     
  302                     ;//...............................................................................................
  303                     ;//Internal ZP reg
  304           0000      	.ifndef R0
  309                     	.endif
#[1]   vce_dump.asm
  163                     
  164                     ;other basic functions
#[2]   ../base_func/video/vdc/lib.asm
  165                         .include "../base_func/video/vdc/lib.asm"
    1  00:E226            __wait_vblank:
    2  00:E226            .reload.loop
    3  00:E226  A9 01                 lda #$01
    4  00:E228  8D 02 22              sta __vblank
    5  00:E22B            .loop
    6  00:E22B  AD 02 22              lda __vblank
    7  00:E22E  D0 FB                 bne .loop
    8  00:E230  CA                    dex
    9  00:E231  D0 F3                 bne .reload.loop
   10  00:E233  60            rts
#[1]   vce_dump.asm
#[2]   ../base_func/video/vdc/sprites/lib.asm
  166                         .include "../base_func/video/vdc/sprites/lib.asm"
    1                     
    2                     
    3                     ;.......................................................
    4                     ;
    5  00:E234            SATB.reset
    6                     
    7  00:E234  82                clx
    8  00:E235            .loop
    9  00:E235  9E 03 22          stz cell.Y.lo,x
   10  00:E238  9E 63 22          stz cell.Y.hi,x
   11                     
   12                             ; stz cell.X.lo,x
   13                             ; stz cell.X.hi,x
   14                     
   15                             ; stz cell.attribs.lo,x
   16                             ; stz cell.attribs.hi,x
   17                     
   18                             ; stz cell.pattern.lo,x
   19                             ; stz cell.pattern.hi,x
   20                     
   21  00:E23B  E8                inx
   22  00:E23C  E0 60             cpx #SpriteGroupSize
   23  00:E23E  D0 F5           bne .loop
   24  00:E240  9C 05 25          stz SATB.openslot
   25  00:E243  A9 40             lda #$40
   26  00:E245  8D 06 25          sta SATB.openslot.hpriority
   27                     
   28  00:E248  60          rts
   29                     
   30                     
   31                     ;.......................................................
   32                     ;
   33  00:E249            SATB.dma
   34                             VDC.reg MAWR, SATB.vramAddr
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       00:E249  03 00         st0 #MAWR
       00:E24B  AD 03 25      lda SATB.vramAddr
       00:E24E  8D 02 00      sta $0002
       00:E251  AD 04 25      lda SATB.vramAddr+1
       00:E254  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
   35                             VDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       00:E257  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
   36                     
   37                             ;debug box
   38                             ; lda player.camera.y
   39                             ; clc
   40                             ; adc #low(0)
   41                             ; sta $0002
   42                             ; lda player.camera.y+1
   43                             ; adc #high(0)
   44                             ; sta $0003
   45                     
   46                             ; lda player.camera.x
   47                             ; clc
   48                             ; adc #low(0)
   49                             ; sta $0002
   50                             ; lda player.camera.x+1
   51                             ; adc #high(0)
   52                             ; sta $0003
   53                     
   54                             ; lda #low($f0*2)
   55                             ; sta $0002
   56                             ; lda #high($f0*2)
   57                             ; sta $0003
   58                     
   59                             ; lda #low(NO_H_FLIP | NO_V_FLIP | PRIOR_H | SIZE16_32 | SPAL1)
   60                             ; sta $0002
   61                             ; lda #high(NO_H_FLIP | NO_V_FLIP | PRIOR_H | SIZE16_32 | SPAL1)
   62                             ; sta $0003
   63                     
   64                     
   65  00:E259  AE 06 25          ldx SATB.openslot.hpriority
   66  00:E25C  8A                txa
   67  00:E25D  38                sec
   68  00:E25E  E9 40             sbc #$40
   69  00:E260  A8                tay
   70  00:E261  A2 40             ldx #$40
   71  00:E263  20 80 E2          jsr .xfer.sprites
   72                     
   73  00:E266  82                clx
   74  00:E267  AD 06 25          lda SATB.openslot.hpriority
   75  00:E26A  38                sec
   76  00:E26B  E9 40             sbc #$40
   77  00:E26D  49 FF             eor #$ff
   78  00:E26F  1A                inc a
   79  00:E270  18                clc
   80  00:E271  69 40             adc #$40
   81  00:E273  A8                tay
   82  00:E274  20 80 E2          jsr .xfer.sprites
   83                     
   84  00:E277  9C 05 25          stz SATB.openslot
   85  00:E27A  A9 40             lda #$40
   86  00:E27C  8D 06 25          sta SATB.openslot.hpriority
   87                     
   88  00:E27F  60          rts
   89                     
   90  00:E280            .xfer.sprites
   91                     
   92  00:E280  C0 00             cpy #$00
   93  00:E282  F0 34           beq .out
   94                     
   95                             MOVE.b cell.Y.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E284  BD 03 22      lda cell.Y.lo,x
       00:E287  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
   96                             MOVE.b cell.Y.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E28A  BD 63 22      lda cell.Y.hi,x
       00:E28D  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
   97                     
   98                             MOVE.b cell.X.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E290  BD C3 22      lda cell.X.lo,x
       00:E293  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
   99                             MOVE.b cell.X.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E296  BD 23 23      lda cell.X.hi,x
       00:E299  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  100                     
  101                             MOVE.b cell.pattern.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E29C  BD 43 24      lda cell.pattern.lo,x
       00:E29F  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
  102                             MOVE.b cell.pattern.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2A2  BD A3 24      lda cell.pattern.hi,x
       00:E2A5  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  103                     
  104                             MOVE.b cell.attribs.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2A8  BD 83 23      lda cell.attribs.lo,x
       00:E2AB  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
  105                             MOVE.b cell.attribs.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2AE  BD E3 23      lda cell.attribs.hi,x
       00:E2B1  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  106                     
  107  00:E2B4  E8                inx
  108  00:E2B5  88                dey
  109  00:E2B6  D0 C8           bne .xfer.sprites
  110                     
  111  00:E2B8            .out
  112                     
  113  00:E2B8  60          rts
  114                     
  115                     ;.......................................................
  116                     ;
  117  00:E2B9            SATB.hide
  118                     
  119  00:E2B9  60          rts
  120                     
  121                     
#[1]   vce_dump.asm
  167                     
  168                     ; Lib stuffs
#[2]   ../lib/controls/lib.asm
  169                         .include "../lib/controls/lib.asm"
    1                     
    2                     ;....................................................
    3                     ;//initialize gamepad status variables
    4  00:E2BA            Controls.Init:
    5                     
    6                             MOVE.b #3, b1_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2BA  A9 03         lda #3
       00:E2BC  8D 0F 25      sta b1_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta b1_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx b1_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty b1_delay
                          ;        .endif
                          ;    .endif
                          
    7                             MOVE.b #3, b2_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2BF  A9 03         lda #3
       00:E2C1  8D 10 25      sta b2_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta b2_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx b2_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty b2_delay
                          ;        .endif
                          ;    .endif
                          
    8                             MOVE.b #3, sl_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2C4  A9 03         lda #3
       00:E2C6  8D 11 25      sta sl_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta sl_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx sl_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty sl_delay
                          ;        .endif
                          ;    .endif
                          
    9                             MOVE.b #3, st_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2C9  A9 03         lda #3
       00:E2CB  8D 12 25      sta st_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta st_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx st_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty st_delay
                          ;        .endif
                          ;    .endif
                          
   10                             MOVE.b #3, up_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2CE  A9 03         lda #3
       00:E2D0  8D 13 25      sta up_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta up_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx up_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty up_delay
                          ;        .endif
                          ;    .endif
                          
   11                             MOVE.b #3, dn_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2D3  A9 03         lda #3
       00:E2D5  8D 14 25      sta dn_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta dn_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx dn_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty dn_delay
                          ;        .endif
                          ;    .endif
                          
   12                             MOVE.b #3, lf_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2D8  A9 03         lda #3
       00:E2DA  8D 15 25      sta lf_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta lf_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx lf_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty lf_delay
                          ;        .endif
                          ;    .endif
                          
   13                             MOVE.b #3, rh_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2DD  A9 03         lda #3
       00:E2DF  8D 16 25      sta rh_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta rh_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx rh_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty rh_delay
                          ;        .endif
                          ;    .endif
                          
   14  00:E2E2  9C 17 25          stz b1_counter
   15  00:E2E5  9C 18 25          stz b2_counter
   16  00:E2E8  9C 19 25          stz sl_counter
   17  00:E2EB  9C 1A 25          stz st_counter
   18  00:E2EE  9C 1B 25          stz up_counter
   19  00:E2F1  9C 1C 25          stz dn_counter
   20  00:E2F4  9C 1D 25          stz lf_counter
   21  00:E2F7  9C 1E 25          stz rh_counter
   22                     
   23  00:E2FA  60          rts
   24                     ;#end
   25                     
   26                     
   27                     
   28                     ;....................................................
   29                     ; Convert incoming raw button status into button states
   30  00:E2FB            Controls.ProcessInput:
   31                     
   32                     
   33                     ;................
   34  00:E2FB            .dpad_check
   35                     
   36  00:E2FB  AD 0B 25          lda up_status
   37  00:E2FE  0D 0C 25          ora dn_status
   38  00:E301  C9 05             cmp #$1+$4
   39  00:E303  B0 0D           bcs .invalid
   40  00:E305  AD 0D 25          lda lf_status
   41  00:E308  0D 0E 25          ora rh_status
   42  00:E30B  C9 0A             cmp #$8+$2
   43  00:E30D  B0 03           bcs .invalid
   44  00:E30F  4C 18 E3          jmp .dpad_process
   45                     
   46  00:E312            .invalid
   47  00:E312  9C 20 25        stz input_state.directions
   48  00:E315  4C 7C E4        jmp .button_process
   49                     
   50                     
   51                     
   52                     
   53                     ;....................................................
   54  00:E318            .dpad_process
   55                     
   56                     ;.....................
   57  00:E318            .up
   58  00:E318  AD 0B 25          lda up_status
   59  00:E31B  F0 33           beq .up.up
   60                     
   61  00:E31D            .up.down
   62  00:E31D  AD 20 25          lda input_state.directions
   63  00:E320  29 03             and #control.up.mask
   64  00:E322  C9 02             cmp #control.up.held
   65  00:E324  F0 4B           beq .up.skip
   66  00:E326  C9 03             cmp #control.up.pressed
   67  00:E328  D0 0C           bne .up.count
   68  00:E32A            .up.held
   69  00:E32A  AD 20 25          lda input_state.directions
   70  00:E32D  29 FC             and #(control.up.mask ^ $ff)
   71  00:E32F  09 02             ora #control.up.held
   72  00:E331  8D 20 25          sta input_state.directions
   73  00:E334  80 3B             bra .up.skip
   74                     
   75  00:E336            .up.count
   76  00:E336  EE 1B 25          inc up_counter
   77  00:E339  AD 1B 25          lda up_counter
   78  00:E33C  CD 13 25          cmp up_delay
   79  00:E33F  90 30           bcc .up.skip
   80  00:E341            .up.pressed
   81  00:E341  9C 1B 25          stz up_counter
   82  00:E344  AD 20 25          lda input_state.directions
   83  00:E347  29 FC             and #(control.up.mask ^ $ff)
   84  00:E349  09 03             ora #control.up.pressed
   85  00:E34B  8D 20 25          sta input_state.directions
   86  00:E34E  80 21             bra .up.skip
   87                     
   88  00:E350            .up.up
   89  00:E350  AD 20 25          lda input_state.directions
   90  00:E353  29 03             and #control.up.mask
   91  00:E355  C9 00             cmp #control.up.inactive
   92  00:E357  F0 18           beq .up.skip
   93  00:E359  C9 01             cmp #control.up.released
   94  00:E35B  D0 0A           bne .up.released
   95  00:E35D            .up.clear
   96  00:E35D  AD 20 25          lda input_state.directions
   97  00:E360  29 FC             and #(control.up.mask ^ $ff)
   98  00:E362  8D 20 25          sta input_state.directions
   99  00:E365  80 0A             bra .up.skip
  100  00:E367            .up.released
  101  00:E367  AD 20 25          lda input_state.directions
  102  00:E36A  29 FC             and #(control.up.mask ^ $ff)
  103  00:E36C  09 01             ora #control.up.released
  104  00:E36E  8D 20 25          sta input_state.directions
  105                     
  106                     
  107  00:E371            .up.skip
  108                     
  109                     
  110                     ;.....................
  111  00:E371            .dn
  112  00:E371  AD 0C 25          lda dn_status
  113  00:E374  F0 33           beq .dn.up
  114                     
  115  00:E376            .dn.down
  116  00:E376  AD 20 25          lda input_state.directions
  117  00:E379  29 0C             and #control.dn.mask
  118  00:E37B  C9 08             cmp #control.dn.held
  119  00:E37D  F0 4B           beq .dn.skip
  120  00:E37F  C9 0C             cmp #control.dn.pressed
  121  00:E381  D0 0C           bne .dn.count
  122  00:E383            .dn.held
  123  00:E383  AD 20 25          lda input_state.directions
  124  00:E386  29 F3             and #(control.dn.mask ^ $ff)
  125  00:E388  09 08             ora #control.dn.held
  126  00:E38A  8D 20 25          sta input_state.directions
  127  00:E38D  80 3B             bra .dn.skip
  128                     
  129  00:E38F            .dn.count
  130  00:E38F  EE 1C 25          inc dn_counter
  131  00:E392  AD 1C 25          lda dn_counter
  132  00:E395  CD 14 25          cmp dn_delay
  133  00:E398  90 30           bcc .dn.skip
  134  00:E39A            .dn.pressed
  135  00:E39A  9C 1C 25          stz dn_counter
  136  00:E39D  AD 20 25          lda input_state.directions
  137  00:E3A0  29 F3             and #(control.dn.mask ^ $ff)
  138  00:E3A2  09 0C             ora #control.dn.pressed
  139  00:E3A4  8D 20 25          sta input_state.directions
  140  00:E3A7  80 21             bra .dn.skip
  141                     
  142  00:E3A9            .dn.up
  143  00:E3A9  AD 20 25          lda input_state.directions
  144  00:E3AC  29 0C             and #control.dn.mask
  145  00:E3AE  C9 00             cmp #control.dn.inactive
  146  00:E3B0  F0 18           beq .dn.skip
  147  00:E3B2  C9 04             cmp #control.dn.released
  148  00:E3B4  D0 0A           bne .dn.released
  149  00:E3B6            .dn.clear
  150  00:E3B6  AD 20 25          lda input_state.directions
  151  00:E3B9  29 F3             and #(control.dn.mask ^ $ff)
  152  00:E3BB  8D 20 25          sta input_state.directions
  153  00:E3BE  80 0A             bra .dn.skip
  154  00:E3C0            .dn.released
  155  00:E3C0  AD 20 25          lda input_state.directions
  156  00:E3C3  29 F3             and #(control.dn.mask ^ $ff)
  157  00:E3C5  09 04             ora #control.dn.released
  158  00:E3C7  8D 20 25          sta input_state.directions
  159                     
  160                     
  161  00:E3CA            .dn.skip
  162                     
  163                     
  164                     ;.....................
  165  00:E3CA            .lf
  166  00:E3CA  AD 0D 25          lda lf_status
  167  00:E3CD  F0 33           beq .lf.up
  168                     
  169  00:E3CF            .lf.down
  170  00:E3CF  AD 20 25          lda input_state.directions
  171  00:E3D2  29 30             and #control.lf.mask
  172  00:E3D4  C9 20             cmp #control.lf.held
  173  00:E3D6  F0 4B           beq .lf.skip
  174  00:E3D8  C9 30             cmp #control.lf.pressed
  175  00:E3DA  D0 0C           bne .lf.count
  176  00:E3DC            .lf.held
  177  00:E3DC  AD 20 25          lda input_state.directions
  178  00:E3DF  29 CF             and #(control.lf.mask ^ $ff)
  179  00:E3E1  09 20             ora #control.lf.held
  180  00:E3E3  8D 20 25          sta input_state.directions
  181  00:E3E6  80 3B             bra .lf.skip
  182                     
  183  00:E3E8            .lf.count
  184  00:E3E8  EE 1D 25          inc lf_counter
  185  00:E3EB  AD 1D 25          lda lf_counter
  186  00:E3EE  CD 15 25          cmp lf_delay
  187  00:E3F1  90 30           bcc .lf.skip
  188  00:E3F3            .lf.pressed
  189  00:E3F3  9C 1D 25          stz lf_counter
  190  00:E3F6  AD 20 25          lda input_state.directions
  191  00:E3F9  29 CF             and #(control.lf.mask ^ $ff)
  192  00:E3FB  09 30             ora #control.lf.pressed
  193  00:E3FD  8D 20 25          sta input_state.directions
  194  00:E400  80 21             bra .lf.skip
  195                     
  196  00:E402            .lf.up
  197  00:E402  AD 20 25          lda input_state.directions
  198  00:E405  29 30             and #control.lf.mask
  199  00:E407  C9 00             cmp #control.lf.inactive
  200  00:E409  F0 18           beq .lf.skip
  201  00:E40B  C9 10             cmp #control.lf.released
  202  00:E40D  D0 0A           bne .lf.released
  203  00:E40F            .lf.clear
  204  00:E40F  AD 20 25          lda input_state.directions
  205  00:E412  29 CF             and #(control.lf.mask ^ $ff)
  206  00:E414  8D 20 25          sta input_state.directions
  207  00:E417  80 0A             bra .lf.skip
  208  00:E419            .lf.released
  209  00:E419  AD 20 25          lda input_state.directions
  210  00:E41C  29 CF             and #(control.lf.mask ^ $ff)
  211  00:E41E  09 10             ora #control.lf.released
  212  00:E420  8D 20 25          sta input_state.directions
  213                     
  214  00:E423            .lf.skip
  215                     
  216                     
  217                     ;.....................
  218  00:E423            .rh
  219  00:E423  AD 0E 25          lda rh_status
  220  00:E426  F0 33           beq .rh.up
  221                     
  222  00:E428            .rh.down
  223  00:E428  AD 20 25          lda input_state.directions
  224  00:E42B  29 C0             and #control.rh.mask
  225  00:E42D  C9 80             cmp #control.rh.held
  226  00:E42F  F0 4B           beq .rh.skip
  227  00:E431  C9 C0             cmp #control.rh.pressed
  228  00:E433  D0 0C           bne .rh.count
  229  00:E435            .rh.held
  230  00:E435  AD 20 25          lda input_state.directions
  231  00:E438  29 3F             and #(control.rh.mask ^ $ff)
  232  00:E43A  09 80             ora #control.rh.held
  233  00:E43C  8D 20 25          sta input_state.directions
  234  00:E43F  80 3B             bra .rh.skip
  235  00:E441            .rh.count
  236  00:E441  EE 1E 25          inc rh_counter
  237  00:E444  AD 1E 25          lda rh_counter
  238  00:E447  CD 16 25          cmp rh_delay
  239  00:E44A  90 30           bcc .rh.skip
  240  00:E44C            .rh.pressed
  241  00:E44C  9C 1E 25          stz rh_counter
  242  00:E44F  AD 20 25          lda input_state.directions
  243  00:E452  29 3F             and #(control.rh.mask ^ $ff)
  244  00:E454  09 C0             ora #control.rh.pressed
  245  00:E456  8D 20 25          sta input_state.directions
  246  00:E459  80 21             bra .rh.skip
  247                     
  248  00:E45B            .rh.up
  249  00:E45B  AD 20 25          lda input_state.directions
  250  00:E45E  29 C0             and #control.rh.mask
  251  00:E460  C9 00             cmp #control.rh.inactive
  252  00:E462  F0 18           beq .rh.skip
  253  00:E464  C9 40             cmp #control.rh.released
  254  00:E466  D0 0A           bne .rh.released
  255  00:E468            .rh.clear
  256  00:E468  AD 20 25          lda input_state.directions
  257  00:E46B  29 3F             and #(control.rh.mask ^ $ff)
  258  00:E46D  8D 20 25          sta input_state.directions
  259  00:E470  80 0A             bra .rh.skip
  260  00:E472            .rh.released
  261  00:E472  AD 20 25          lda input_state.directions
  262  00:E475  29 3F             and #(control.rh.mask ^ $ff)
  263  00:E477  09 40             ora #control.rh.released
  264  00:E479  8D 20 25          sta input_state.directions
  265                     
  266  00:E47C            .rh.skip
  267                     
  268                     
  269                     ;....................................................
  270  00:E47C            .button_process
  271                     
  272                     
  273                     ;.....................
  274  00:E47C            .b1
  275  00:E47C  AD 07 25          lda b1_status
  276  00:E47F  F0 33           beq .b1.up
  277                     
  278  00:E481            .b1.down
  279  00:E481  AD 1F 25          lda input_state.buttons
  280  00:E484  29 03             and #control.b1.mask
  281  00:E486  C9 02             cmp #control.b1.held
  282  00:E488  F0 4B           beq .b1.skip
  283  00:E48A  C9 03             cmp #control.b1.pressed
  284  00:E48C  D0 0C           bne .b1.count
  285  00:E48E            .b1.held
  286  00:E48E  AD 1F 25          lda input_state.buttons
  287  00:E491  29 FC             and #(control.b1.mask ^ $ff)
  288  00:E493  09 02             ora #control.b1.held
  289  00:E495  8D 1F 25          sta input_state.buttons
  290  00:E498  80 3B             bra .b1.skip
  291                     
  292  00:E49A            .b1.count
  293  00:E49A  EE 17 25          inc b1_counter
  294  00:E49D  AD 17 25          lda b1_counter
  295  00:E4A0  CD 0F 25          cmp b1_delay
  296  00:E4A3  90 30           bcc .b1.skip
  297  00:E4A5            .b1.pressed
  298  00:E4A5  9C 17 25          stz b1_counter
  299  00:E4A8  AD 1F 25          lda input_state.buttons
  300  00:E4AB  29 FC             and #(control.b1.mask ^ $ff)
  301  00:E4AD  09 03             ora #control.b1.pressed
  302  00:E4AF  8D 1F 25          sta input_state.buttons
  303  00:E4B2  80 21             bra .b1.skip
  304                     
  305  00:E4B4            .b1.up
  306  00:E4B4  AD 1F 25          lda input_state.buttons
  307  00:E4B7  29 03             and #control.b1.mask
  308  00:E4B9  C9 00             cmp #control.b1.inactive
  309  00:E4BB  F0 18           beq .b1.skip
  310  00:E4BD  C9 01             cmp #control.b1.released
  311  00:E4BF  D0 0A           bne .b1.released
  312  00:E4C1            .b1.clear
  313  00:E4C1  AD 1F 25          lda input_state.buttons
  314  00:E4C4  29 FC             and #(control.b1.mask ^ $ff)
  315  00:E4C6  8D 1F 25          sta input_state.buttons
  316  00:E4C9  80 0A             bra .b1.skip
  317  00:E4CB            .b1.released
  318  00:E4CB  AD 1F 25          lda input_state.buttons
  319  00:E4CE  29 FC             and #(control.b1.mask ^ $ff)
  320  00:E4D0  09 01             ora #control.b1.released
  321  00:E4D2  8D 1F 25          sta input_state.buttons
  322                     
  323  00:E4D5            .b1.skip
  324                     
  325                     
  326                     ;.....................
  327  00:E4D5            .b2
  328  00:E4D5  AD 08 25          lda b2_status
  329  00:E4D8  F0 33           beq .b2.up
  330                     
  331  00:E4DA            .b2.down
  332  00:E4DA  AD 1F 25          lda input_state.buttons
  333  00:E4DD  29 0C             and #control.b2.mask
  334  00:E4DF  C9 08             cmp #control.b2.held
  335  00:E4E1  F0 4B           beq .b2.skip
  336  00:E4E3  C9 0C             cmp #control.b2.pressed
  337  00:E4E5  D0 0C           bne .b2.count
  338  00:E4E7            .b2.held
  339  00:E4E7  AD 1F 25          lda input_state.buttons
  340  00:E4EA  29 F3             and #(control.b2.mask ^ $ff)
  341  00:E4EC  09 08             ora #control.b2.held
  342  00:E4EE  8D 1F 25          sta input_state.buttons
  343  00:E4F1  80 3B             bra .b2.skip
  344                     
  345  00:E4F3            .b2.count
  346  00:E4F3  EE 18 25          inc b2_counter
  347  00:E4F6  AD 18 25          lda b2_counter
  348  00:E4F9  CD 10 25          cmp b2_delay
  349  00:E4FC  90 30           bcc .b2.skip
  350  00:E4FE            .b2.pressed
  351  00:E4FE  9C 18 25          stz b2_counter
  352  00:E501  AD 1F 25          lda input_state.buttons
  353  00:E504  29 F3             and #(control.b2.mask ^ $ff)
  354  00:E506  09 0C             ora #control.b2.pressed
  355  00:E508  8D 1F 25          sta input_state.buttons
  356  00:E50B  80 21             bra .b2.skip
  357                     
  358  00:E50D            .b2.up
  359  00:E50D  AD 1F 25          lda input_state.buttons
  360  00:E510  29 0C             and #control.b2.mask
  361  00:E512  C9 00             cmp #control.b2.inactive
  362  00:E514  F0 18           beq .b2.skip
  363  00:E516  C9 04             cmp #control.b2.released
  364  00:E518  D0 0A           bne .b2.released
  365  00:E51A            .b2.clear
  366  00:E51A  AD 1F 25          lda input_state.buttons
  367  00:E51D  29 F3             and #(control.b2.mask ^ $ff)
  368  00:E51F  8D 1F 25          sta input_state.buttons
  369  00:E522  80 0A             bra .b2.skip
  370  00:E524            .b2.released
  371  00:E524  AD 1F 25          lda input_state.buttons
  372  00:E527  29 F3             and #(control.b2.mask ^ $ff)
  373  00:E529  09 04             ora #control.b2.released
  374  00:E52B  8D 1F 25          sta input_state.buttons
  375                     
  376  00:E52E            .b2.skip
  377                     
  378                     
  379                     ;.....................
  380  00:E52E            .st
  381  00:E52E  AD 0A 25          lda st_status
  382  00:E531  F0 33           beq .st.up
  383                     
  384  00:E533            .st.down
  385  00:E533  AD 1F 25          lda input_state.buttons
  386  00:E536  29 30             and #control.st.mask
  387  00:E538  C9 20             cmp #control.st.held
  388  00:E53A  F0 4B           beq .st.skip
  389  00:E53C  C9 30             cmp #control.st.pressed
  390  00:E53E  D0 0C           bne .st.count
  391  00:E540            .st.held
  392  00:E540  AD 1F 25          lda input_state.buttons
  393  00:E543  29 CF             and #(control.st.mask ^ $ff)
  394  00:E545  09 20             ora #control.st.held
  395  00:E547  8D 1F 25          sta input_state.buttons
  396  00:E54A  80 3B             bra .st.skip
  397                     
  398  00:E54C            .st.count
  399  00:E54C  EE 1A 25          inc st_counter
  400  00:E54F  AD 1A 25          lda st_counter
  401  00:E552  CD 12 25          cmp st_delay
  402  00:E555  90 30           bcc .st.skip
  403  00:E557            .st.pressed
  404  00:E557  9C 1A 25          stz st_counter
  405  00:E55A  AD 1F 25          lda input_state.buttons
  406  00:E55D  29 CF             and #(control.st.mask ^ $ff)
  407  00:E55F  09 30             ora #control.st.pressed
  408  00:E561  8D 1F 25          sta input_state.buttons
  409  00:E564  80 21             bra .st.skip
  410                     
  411  00:E566            .st.up
  412  00:E566  AD 1F 25          lda input_state.buttons
  413  00:E569  29 30             and #control.st.mask
  414  00:E56B  C9 00             cmp #control.st.inactive
  415  00:E56D  F0 18           beq .st.skip
  416  00:E56F  C9 10             cmp #control.st.released
  417  00:E571  D0 0A           bne .st.released
  418  00:E573            .st.clear
  419  00:E573  AD 1F 25          lda input_state.buttons
  420  00:E576  29 CF             and #(control.st.mask ^ $ff)
  421  00:E578  8D 1F 25          sta input_state.buttons
  422  00:E57B  80 0A             bra .st.skip
  423  00:E57D            .st.released
  424  00:E57D  AD 1F 25          lda input_state.buttons
  425  00:E580  29 CF             and #(control.st.mask ^ $ff)
  426  00:E582  09 10             ora #control.st.released
  427  00:E584  8D 1F 25          sta input_state.buttons
  428                     
  429  00:E587            .st.skip
  430                     
  431                     
  432                     ;.....................
  433  00:E587            .sl
  434  00:E587  AD 09 25          lda sl_status
  435  00:E58A  F0 33           beq .sl.up
  436                     
  437  00:E58C            .sl.down
  438  00:E58C  AD 1F 25          lda input_state.buttons
  439  00:E58F  29 C0             and #control.sl.mask
  440  00:E591  C9 80             cmp #control.sl.held
  441  00:E593  F0 4B           beq .sl.skip
  442  00:E595  C9 C0             cmp #control.sl.pressed
  443  00:E597  D0 0C           bne .sl.count
  444  00:E599            .sl.held
  445  00:E599  AD 1F 25          lda input_state.buttons
  446  00:E59C  29 3F             and #(control.sl.mask ^ $ff)
  447  00:E59E  09 80             ora #control.sl.held
  448  00:E5A0  8D 1F 25          sta input_state.buttons
  449  00:E5A3  80 3B             bra .sl.skip
  450                     
  451  00:E5A5            .sl.count
  452  00:E5A5  EE 19 25          inc sl_counter
  453  00:E5A8  AD 19 25          lda sl_counter
  454  00:E5AB  CD 11 25          cmp sl_delay
  455  00:E5AE  90 30           bcc .sl.skip
  456  00:E5B0            .sl.pressed
  457  00:E5B0  9C 19 25          stz sl_counter
  458  00:E5B3  AD 1F 25          lda input_state.buttons
  459  00:E5B6  29 3F             and #(control.sl.mask ^ $ff)
  460  00:E5B8  09 C0             ora #control.sl.pressed
  461  00:E5BA  8D 1F 25          sta input_state.buttons
  462  00:E5BD  80 21             bra .sl.skip
  463                     
  464  00:E5BF            .sl.up
  465  00:E5BF  AD 1F 25          lda input_state.buttons
  466  00:E5C2  29 C0             and #control.sl.mask
  467  00:E5C4  C9 00             cmp #control.sl.inactive
  468  00:E5C6  F0 18           beq .sl.skip
  469  00:E5C8  C9 40             cmp #control.sl.released
  470  00:E5CA  D0 0A           bne .sl.released
  471  00:E5CC            .sl.clear
  472  00:E5CC  AD 1F 25          lda input_state.buttons
  473  00:E5CF  29 3F             and #(control.sl.mask ^ $ff)
  474  00:E5D1  8D 1F 25          sta input_state.buttons
  475  00:E5D4  80 0A             bra .sl.skip
  476  00:E5D6            .sl.released
  477  00:E5D6  AD 1F 25          lda input_state.buttons
  478  00:E5D9  29 3F             and #(control.sl.mask ^ $ff)
  479  00:E5DB  09 40             ora #control.sl.released
  480  00:E5DD  8D 1F 25          sta input_state.buttons
  481                     
  482  00:E5E0            .sl.skip
  483                     
  484  00:E5E0  60            rts
#[1]   vce_dump.asm
#[2]   ../lib/HsyncISR/lib.asm
  170                         .include "../lib/HsyncISR/lib.asm"
    1                     
    2                     
    3                     
    4                     ;/////////////////////////////////////////////////////////////////////////////////
    5                     ;/////////////////////////////////////////////////////////////////////////////////
    6                     ;/////////////////////////////////////////////////////////////////////////////////
    7                     ;
    8                     ;//
    9  00:E5E1            HsyncISR.IRQ:
   10                     
   11                     
   12                     ;............................................
   13  00:E5E1            .check
   14  00:E5E1  48            pha
   15                     
   16                     ;............................................
   17  00:E5E2            .hsync
   18  00:E5E2  03 08                 st0 #BYR
   19  00:E5E4  A5 5B                 lda <line.indx
   20  00:E5E6  8D 02 00              sta $0002
   21  00:E5E9  A5 5C                 lda <line.indx+1
   22  00:E5EB  8D 03 00              sta $0003
   23                     
   24                     
   25                             ;     bit <vdc_status
   26                             ; bvs .vsync
   27                     
   28  00:E5EE  03 06                 st0 #RCR
   29  00:E5F0  A5 59                 lda <RCRline
   30  00:E5F2  8D 02 00              sta $0002
   31  00:E5F5  A5 5A                 lda <RCRline+1
   32  00:E5F7  8D 03 00              sta $0003
   33  00:E5FA  E6 59                 inc <RCRline
   34  00:E5FC  D0 02             bne .skip
   35  00:E5FE  E6 5A                 inc <RCRline+1
   36                     
   37  00:E600            .skip
   38                     
   39                                 INC.w <line.indx
       00:E600  E6 5B                 inc <line.indx
       00:E602  D0 02                 bne .x_00036
       00:E604  E6 5C                 inc <line.indx + 1
       00:E606            .x_00036
   40  00:E606  A5 5B                 lda <line.indx
   41  00:E608  C9 08                 cmp #$08
   42  00:E60A  90 0C             bcc .skip2
   43  00:E60C  29 07                 and #$07
   44  00:E60E  C9 01                 cmp #$01
   45  00:E610  D0 06             bne .skip2
   46                                 INC.w <line.indx
       00:E612  E6 5B                 inc <line.indx
       00:E614  D0 02                 bne .x_00037
       00:E616  E6 5C                 inc <line.indx + 1
       00:E618            .x_00037
   47  00:E618            .skip2
   48                     
   49  00:E618  AD 00 00              lda IRQ.ackVDC
   50  00:E61B  85 4D                 sta <vdc_status
   51  00:E61D  89 20                 bit #$20
   52  00:E61F  D0 0B             bne .vsync
   53                     
   54  00:E621  DA            phx
   55  00:E622  5A            phy
   56                     
   57                     ;............................................
   58  00:E623            .out
   59  00:E623  A5 4C                 lda <vdc_reg
   60  00:E625  8D 00 00              sta $0000
   61  00:E628  7A            ply
   62  00:E629  FA            plx
   63  00:E62A  68            pla
   64                     
   65  00:E62B  40            rti
   66                     
   67                     ;............................................
   68  00:E62C            .vsync
   69                     
   70  00:E62C  DA            phx
   71  00:E62D  5A            phy
   72                     
   73  00:E62E  64 5B                 stz <line.indx
   74  00:E630  64 5C                 stz <line.indx+1
   75                     
   76                                 ; VDC.reg CR , #(BG_ON|SPR_OFF|VINT_ON|HINT_ON)
   77  00:E632  A9 40                 lda #(64)
   78  00:E634  85 59                 sta <RCRline
   79  00:E636  03 06                 st0 #RCR
   80  00:E638  8D 02 00              sta $0002
   81  00:E63B  23 00                 st2 #$00
   82  00:E63D  9C 02 22              stz __vblank
   83  00:E640  A9 41                 lda #(65)
   84  00:E642  85 59                 sta <RCRline
   85  00:E644  64 5A                 stz <RCRline+1
   86                     
   87                                 VDC.reg BXR, _BXR
                          
                0000          .if    (3=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 3 = 2)
                               .endif
                          
                0000          .if    (2=3 & 3 = 6)
                              .endif
                          
                0000          .if    (2=2 & 3 = 6)
                              .endif
                          
                0001          .if    (2=2 & 3 = 3)
       00:E646  03 07         st0 #BXR
       00:E648  AD 21 25      lda _BXR
       00:E64B  8D 02 00      sta $0002
       00:E64E  AD 22 25      lda _BXR+1
       00:E651  8D 03 00      sta $0003
                              .endif
                          
   88                                 VDC.reg BYR, _BYR
                          
                0000          .if    (3=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 3 = 2)
                               .endif
                          
                0000          .if    (2=3 & 3 = 6)
                              .endif
                          
                0000          .if    (2=2 & 3 = 6)
                              .endif
                          
                0001          .if    (2=2 & 3 = 3)
       00:E654  03 08         st0 #BYR
       00:E656  AD 23 25      lda _BYR
       00:E659  8D 02 00      sta $0002
       00:E65C  AD 24 25      lda _BYR+1
       00:E65F  8D 03 00      sta $0003
                              .endif
                          
   89                     
   90  00:E662  BF 4E 03              BBS3 <vector_mask, .VDC.custom.vsync
   91                     
   92  00:E665            .HsyncISR.IRQ.VDCrtn
   93  00:E665  4C 23 E6          jmp .out
   94                     
   95  00:E668            .VDC.custom.vsync
   96  00:E668  6C 55 20      jmp [vdc_vsync]
   97                     
   98           E665      HsyncISR.IRQ.VDCrtn = .HsyncISR.IRQ.VDCrtn
   99                     
  100                     
  101                     
  102                     
#[1]   vce_dump.asm
#[2]   ../base_func/IO/gamepad/lib.asm
  171                         .include "../base_func/IO/gamepad/lib.asm"
    1                     ;###############################################
    2                     ;
    3                     ; GAMEPAD support
    4                     ;
    5                     ; required variables:
    6                     ;
    7                     ;    b1_status
    8                     ;    b2_status
    9                     ;    sl_status
   10                     ;    st_status
   11                     ;    up_status
   12                     ;    dn_status
   13                     ;    lf_status
   14                     ;    rh_status
   15                     ;
   16                     ; value returned is : TRUE/FALSE
   17                     ;
   18                     ;
   19                     
   20  00:E66B            Gamepad.Init:
   21                     
   22  00:E66B  9C 07 25          stz b1_status
   23  00:E66E  9C 08 25          stz b2_status
   24  00:E671  9C 09 25          stz sl_status
   25  00:E674  9C 0A 25          stz st_status
   26  00:E677  9C 0B 25          stz up_status
   27  00:E67A  9C 0C 25          stz dn_status
   28  00:E67D  9C 0D 25          stz lf_status
   29  00:E680  9C 0E 25          stz rh_status
   30                     
   31  00:E683  60            rts
   32                     
   33                     
   34  00:E684            Gamepad.READ_IO.single_controller:
   35                     ;
   36                     ; new and improved
   37                     ;
   38  00:E684  48                    pha
   39  00:E685  DA                    phx
   40  00:E686  A9 01             lda #$01
   41  00:E688  8D 00 10          sta $1000
   42  00:E68B  A9 03             lda #$03
   43  00:E68D  8D 00 10          sta $1000
   44  00:E690  A9 01             lda #$01
   45  00:E692  8D 00 10          sta $1000
   46  00:E695  48                pha
   47  00:E696  68                pla
   48  00:E697  EA                nop
   49  00:E698  EA                nop
   50  00:E699  AD 00 10          lda $1000
   51  00:E69C  49 0F             eor #$0f
   52  00:E69E  AA                tax
   53  00:E69F  29 01             and #$01
   54  00:E6A1  8D 0B 25          sta up_status
   55  00:E6A4  8A                txa
   56  00:E6A5  29 04             and #$04
   57  00:E6A7  8D 0C 25          sta dn_status
   58  00:E6AA  8A                txa
   59  00:E6AB  29 08             and #$08
   60  00:E6AD  8D 0D 25          sta lf_status
   61  00:E6B0  8A                txa
   62  00:E6B1  29 02             and #$02
   63  00:E6B3  8D 0E 25          sta rh_status
   64                     
   65                     
   66  00:E6B6  9C 00 10          stz $1000
   67  00:E6B9  48                pha
   68  00:E6BA  68                pla
   69  00:E6BB  EA                nop
   70  00:E6BC  EA                nop
   71  00:E6BD  AD 00 10          lda $1000
   72  00:E6C0  49 0F             eor #$0f
   73  00:E6C2  AA                tax
   74  00:E6C3  29 01             and #$01
   75  00:E6C5  8D 07 25          sta b1_status
   76  00:E6C8  8A                txa
   77  00:E6C9  29 02             and #$02
   78  00:E6CB  8D 08 25          sta b2_status
   79  00:E6CE  8A                txa
   80  00:E6CF  29 04             and #$04
   81  00:E6D1  8D 09 25          sta sl_status
   82  00:E6D4  8A                txa
   83  00:E6D5  29 08             and #$08
   84  00:E6D7  8D 0A 25          sta st_status
   85                     
   86                     
   87  00:E6DA            .exit
   88  00:E6DA  FA                    plx
   89  00:E6DB  68                    pla
   90  00:E6DC  60            rts
   91                     ;#end
#[1]   vce_dump.asm
#[2]   ../lib/slow16by16Mul/lib.asm
  172                         .include "../lib/slow16by16Mul/lib.asm"
    1                     
    2                     
    3                     ;16-bit multiply with 32-bit product
    4                     ;source from 6502.org
    5                     
    6           2000      multiplier   = R0
    7           2002      multiplicand = R1
    8           2004      product      = R2
    9                     
   10  00:E6DD            mult16.16:
   11  00:E6DD  A9 00           lda   #$00
   12  00:E6DF  85 06           sta   <product+2      ; clear upper bits of product
   13  00:E6E1  85 07           sta   <product+3
   14  00:E6E3  A2 10           ldx   #$10           ; set binary count to 16
   15  00:E6E5            .shift_r
   16  00:E6E5  46 01           lsr   <multiplier+1   ; divide multiplier by 2
   17  00:E6E7  66 00           ror   <multiplier
   18  00:E6E9  90 0B         bcc .rotate_r
   19  00:E6EB  A5 06           lda   <product+2      ; get upper half of product and add multiplicand
   20  00:E6ED  18              clc
   21  00:E6EE  65 02           adc   <multiplicand
   22  00:E6F0  85 06           sta   <product+2
   23  00:E6F2  A5 07           lda   <product+3
   24  00:E6F4  65 03           adc   <multiplicand+1
   25  00:E6F6            .rotate_r
   26  00:E6F6  6A              ror   a               ; rotate partial product
   27  00:E6F7  85 07           sta   <product+3
   28  00:E6F9  66 06           ror   <product+2
   29  00:E6FB  66 05           ror   <product+1
   30  00:E6FD  66 04           ror   <product
   31  00:E6FF  CA              dex
   32  00:E700  D0 E3         bne   .shift_r
   33  00:E702  60        rts
   34                     
   35  00:E703            mult8.16:
   36  00:E703  A9 00           lda   #$00
   37  00:E705  85 06           sta   <product+2      ; clear upper bits of product
   38  00:E707  85 07           sta   <product+3
   39  00:E709  A2 08           ldx   #$8            ; set binary count to 16
   40  00:E70B            .shift_r
   41  00:E70B  46 01           lsr   <multiplier+1   ; divide multiplier by 2
   42  00:E70D  66 00           ror   <multiplier
   43  00:E70F  90 0B         bcc .rotate_r
   44  00:E711  A5 06           lda   <product+2      ; get upper half of product and add multiplicand
   45  00:E713  18              clc
   46  00:E714  65 02           adc   <multiplicand
   47  00:E716  85 06           sta   <product+2
   48  00:E718  A5 07           lda   <product+3
   49  00:E71A  65 03           adc   <multiplicand+1
   50  00:E71C            .rotate_r
   51  00:E71C  6A              ror   a               ; rotate partial product
   52  00:E71D  85 07           sta   <product+3
   53  00:E71F  66 06           ror   <product+2
   54  00:E721  66 05           ror   <product+1
   55  00:E723  66 04           ror   <product
   56  00:E725  CA              dex
   57  00:E726  D0 E3         bne   .shift_r
   58  00:E728  60        rts
   59                     
   60                     
#[1]   vce_dump.asm
#[2]   ../lib/random/16bit/lib.asm
  173                         .include "../lib/random/16bit/lib.asm"
    1                     ;
    2                     ; Source: https://codebase64.org/doku.php?id=base:16bit_xorshift_random_generator
    3                     ; Author: Veikko Sariola
    4                     ;
    5                     ;
    6                     
    7                     
    8                     ;..................................................................
    9                     ;
   10                     ; You can get 8-bit random numbers in A or 16-bit numbers
   11                     ; from the zero page addresses. Leaves X/Y unchanged.
   12                     
   13  00:E729            random.rnd:
   14  00:E729  AD 7E 27          lda random.RNG.hi
   15  00:E72C  4A                lsr a
   16  00:E72D  AD 7D 27          lda random.RNG.lo
   17  00:E730  6A                ror a
   18  00:E731  4D 7E 27          eor random.RNG.hi
   19  00:E734  8D 7E 27          sta random.RNG.hi ; high part of x ^= x << 7 done
   20  00:E737  6A                ror a            ; A has now x >> 9 and high bit comes from low byte
   21  00:E738  4D 7D 27          eor random.RNG.lo
   22  00:E73B  8D 7D 27          sta random.RNG.lo  ; x ^= x >> 9 and the low part of x ^= x << 7 done
   23  00:E73E  4D 7E 27          eor random.RNG.hi
   24  00:E741  8D 7E 27          sta random.RNG.hi ; x ^= x << 8 done
   25  00:E744  60          rts
   26                     
#[1]   vce_dump.asm
  174                     
  175                     ;end DATA
  176                     ;//...................................................................
  177                     
  178                     
  179                     ;/////////////////////////////////////////////////////////////////////////////////
  180                     ;/////////////////////////////////////////////////////////////////////////////////
  181                     ;/////////////////////////////////////////////////////////////////////////////////
  182                     ;
  183                     ;// Interrupt routines
  184                     
  185                     ;//........
  186  00:E745            TIRQ.custom
  187  00:E745  6C 53 20      jmp [timer_vect]
  188                     
  189  00:E748            TIRQ:   ;// Not used
  190  00:E748  AF 4E FA          BBS2 <vector_mask, TIRQ.custom
  191  00:E74B  9C 03 14          stz $1403
  192  00:E74E  40                rti
  193                     
  194                     ;//........
  195  00:E74F            BRK.custom
  196  00:E74F  6C 51 20      jmp [brk_vect]
  197  00:E752            BRK:
  198  00:E752  9F 4E FA          BBS1 <vector_mask, BRK.custom
  199  00:E755  40                rti
  200                     
  201                     ;//........
  202  00:E756            VDC.custom
  203  00:E756  6C 4F 20      jmp [vdc_vect]
  204                     
  205  00:E759            VDC:
  206  00:E759  8F 4E FA          BBS0 <vector_mask, VDC.custom
  207  00:E75C  48                  pha
  208  00:E75D  AD 00 00          lda IRQ.ackVDC
  209  00:E760  85 4D             sta <vdc_status
  210  00:E762  89 20             bit #$20
  211  00:E764  D0 0E             bne VDC.vsync
  212  00:E766            VDC.hsync
  213  00:E766  BF 4E 05          BBS3 <vector_mask, VDC.custom.hsync
  214  00:E769  DF 4D 08          BBS5 <vdc_status, VDC.vsync
  215  00:E76C  68                  pla
  216  00:E76D  40                rti
  217                     
  218  00:E76E            VDC.custom.hsync
  219  00:E76E  6C 57 20      jmp [vdc_hsync]
  220                     
  221  00:E771            VDC.custom.vsync
  222  00:E771  6C 55 20      jmp [vdc_vsync]
  223                     
  224  00:E774            VDC.vsync
  225  00:E774  DA                phx
  226  00:E775  5A                phy
  227  00:E776  CF 4E F8          BBS4 <vector_mask, VDC.custom.vsync
  228                     
  229  00:E779            VDC.vsync.rtn
  230  00:E779  7A                ply
  231  00:E77A  FA                plx
  232  00:E77B  68                pla
  233  00:E77C  9C 02 22        stz __vblank
  234  00:E77F  40          rti
  235                     
  236                     ;//........
  237  00:E780            NMI:
  238  00:E780  40                rti
  239                     
  240                     ;end INT
  241                     
  242                     ;/////////////////////////////////////////////////////////////////////////////////
  243                     ;/////////////////////////////////////////////////////////////////////////////////
  244                     ;/////////////////////////////////////////////////////////////////////////////////
  245                     ;
  246                     ;// INT VECTORS
  247                     
  248           FFF6        .org $fff6
  249                     
  250  00:FFF6  52 E7         .dw BRK
  251  00:FFF8  59 E7         .dw VDC
  252  00:FFFA  48 E7         .dw TIRQ
  253  00:FFFC  80 E7         .dw NMI
  254  00:FFFE  00 E0         .dw startup
  255                     
  256                     ;..............................................................................................................
  257                     ;..............................................................................................................
  258                     ;..............................................................................................................
  259                     ;..............................................................................................................
  260                     ;Bank 0 end
  261                     
  262                     
  263                     
  264                     
  265                     
  266                     ;/////////////////////////////////////////////////////////////////////////////////
  267                     ;/////////////////////////////////////////////////////////////////////////////////
  268                     ;/////////////////////////////////////////////////////////////////////////////////
  269                     ;
  270                     ;// Main code bank @ $C000
  271                     
  272                     ;....................................
  273           0001          .bank $01, "MAIN"
  274           C000          .org $c000
  275                     ;....................................
  276                     
  277                     
  278  01:C000            MAIN:
  279                     
  280                             Random.seed #$18ca
                          
                0001            .if (2=2)
       01:C000  A9 CA               lda #low(#$18ca)
       01:C002  8D 7D 27            sta random.RNG.lo
       01:C005  A9 18               lda #high(#$18ca)
       01:C007  8D 7E 27            sta random.RNG.hi
                                .endif
                          
                0000            .if (2=1)
                                .endif
                          
                0000            .if (2=3)
                                .endif
                          
                0000            .if (2=3)
                                .endif
                          
                0000            .if (2=6)
                                .endif
                          
                0000            .if (2=4)
                                .endif
                          
                          
  281                     
  282                             ;................................
  283                             ; Turn display off, interrupts on
  284                             VDC.reg CR , #(BG_OFF|SPR_OFF|VINT_ON|HINT_ON)
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C00A  03 05         st0 #CR
       01:C00C  13 0C         st1 #LOW(#(BG_OFF|SPR_OFF|VINT_ON|HINT_ON))
       01:C00E  23 00         st2 #HIGH(#(BG_OFF|SPR_OFF|VINT_ON|HINT_ON))
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  285                     
  286                             ;................................
  287                             ; Load font
  288                             loadCellToCram.BG Font, 0
                          
                                  MAP_BANK.2 #(Font.pal) , MPR2
                          
                0001          .if (2=2)
       01:C010  A9 02         lda #bank(#(Font.pal))
       01:C012  53 04         tam #(MPR2)
       01:C014  1A            inc a
       01:C015  53 08         tam #(MPR2 + 1)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                                  VCE.BGblock 0
                          
       01:C017  A9 00     	lda #(0 << 4)
       01:C019  8D 02 04  	sta $402
       01:C01C  9C 03 04  	stz $403
                          
                                  DMA.word.port Font.pal, Page.2, vce_data, Font.pal.size
       01:C01F  E3 00 4C          tia (Font.pal & $1fff)+Page.2,vce_data,Font.pal.size
       01:C022  04 04 10  
       01:C025  00        
  289                             loadCellToCram.BG debug, 1
                          
                                  MAP_BANK.2 #(debug.pal) , MPR2
                          
                0001          .if (2=2)
       01:C026  A9 02         lda #bank(#(debug.pal))
       01:C028  53 04         tam #(MPR2)
       01:C02A  1A            inc a
       01:C02B  53 08         tam #(MPR2 + 1)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                                  VCE.BGblock 1
                          
       01:C02D  A9 10     	lda #(1 << 4)
       01:C02F  8D 02 04  	sta $402
       01:C032  9C 03 04  	stz $403
                          
                                  DMA.word.port debug.pal, Page.2, vce_data, debug.pal.size
       01:C035  E3 10 4C          tia (debug.pal & $1fff)+Page.2,vce_data,debug.pal.size
       01:C038  04 04 20  
       01:C03B  00        
  290                             loadCellToVram Font, $1000
                          
                0001            .if (2 = 2)
                                      MAP_BANK.2 #(Font.cell) , MPR2
                          
                0001          .if (2=2)
       01:C03C  A9 02         lda #bank(#(Font.cell))
       01:C03E  53 04         tam #(MPR2)
       01:C040  1A            inc a
       01:C041  53 08         tam #(MPR2 + 1)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                                      VDC.reg MAWR, #$1000
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C043  03 00         st0 #MAWR
       01:C045  13 00         st1 #LOW(#$1000)
       01:C047  23 10         st2 #HIGH(#$1000)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
                                      VDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C049  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
                                      DMA.word.port Font.cell, Page.2, vdata_port, Font.cell.size
       01:C04B  E3 00 40          tia (Font.cell & $1fff)+Page.2,vdata_port,Font.cell.size
       01:C04E  02 00 00  
       01:C051  0C        
                                .endif
                          
                0000            .if (2 = 1)
                                .endif
  291                     
  292                             ;...............................
  293                             ; Set the ISRs
  294                             ISR.setVector VDC_VEC , HsyncISR.IRQ
                          
       01:C052  08            php
       01:C053  78            sei
                          
                              ; Convert {1,2,4,8,16} to {0,2,4,6,8}
                0001          .if ( VDC_VEC = 1 | VDC_VEC = 2 | VDC_VEC = 4 | VDC_VEC = 8 | VDC_VEC = 16 )
                0001              if ( VDC_VEC = 1 )
       01:C054  A2 00               ldx #0
                                  .endif
                0000              if ( VDC_VEC = 2 )
                                  .endif
                0000              if ( VDC_VEC = 4 )
                                  .endif
                0000              if ( VDC_VEC = 8 )
                                  .endif
                0000              if ( VDC_VEC = 16 )
                                  .endif
                              .else
                              .endif
                          
       01:C056  A9 E1         lda #<HsyncISR.IRQ
       01:C058  95 4F         sta <irq_vector_list,x
       01:C05A  A9 E5         lda #>HsyncISR.IRQ
       01:C05C  95 50         sta <irq_vector_list+1,x
       01:C05E  28            plp
                          
  295                             ISR.setVecMask VDC_VEC
                          
       01:C05F  A9 01         lda #VDC_VEC
       01:C061  04 4E         tsb <vector_mask
                          
  296                     
  297                             ;................................
  298                             ; Clear map
  299  01:C063  20 8A E1          jsr ClearScreen.64x32
  300                     
  301                             ;...............................
  302                             ; Start with the first line of the display
  303                             VDC.reg RCR, #$40
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C066  03 06         st0 #RCR
       01:C068  13 40         st1 #LOW(#$40)
       01:C06A  23 00         st2 #HIGH(#$40)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  304                     
  305                             ;................................
  306                             ; Start the party
  307                             Interrupts.enable
       01:C06C  58            cli
  308                     
  309                             MOVE.b #$00, pal_color0
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C06D  A9 00         lda #$00
       01:C06F  8D 00 22      sta pal_color0
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta pal_color0
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx pal_color0
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty pal_color0
                          ;        .endif
                          ;    .endif
                          
  310                             MOVE.b #$00, pal_color1
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C072  A9 00         lda #$00
       01:C074  8D 01 22      sta pal_color1
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta pal_color1
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx pal_color1
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty pal_color1
                          ;        .endif
                          ;    .endif
                          
  311                     
  312  01:C077            GrabColorValues:
  313                     
  314                             VDC.reg CR , #(BG_OFF|SPR_OFF|VINT_ON|HINT_ON)
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C077  03 05         st0 #CR
       01:C079  13 0C         st1 #LOW(#(BG_OFF|SPR_OFF|VINT_ON|HINT_ON))
       01:C07B  23 00         st2 #HIGH(#(BG_OFF|SPR_OFF|VINT_ON|HINT_ON))
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  315                             WAITVBLANK
                0001              .if (0=0)
       01:C07D  A2 01                 ldx #1
                                  .endif
                          
                0000              .if (0>0)
                                  .endif
                          
                          
       01:C07F  20 26 E2          jsr __wait_vblank
  316                     
  317                             MOVE.w #$00, colorSelect
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & colorSelect != AX)
       01:C082  A9 00         lda #low(#$00)
       01:C084  8D 83 2B      sta colorSelect
       01:C087  A9 00         lda #high(#$00)
       01:C089  8D 84 2B      sta colorSelect + 1
                              .endif
                          
                0000          .if (colorSelect = AX & 2 = 2)
                              .endif
                          
                0000          .if (colorSelect = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (colorSelect = AY & 2 = 2)
                              .endif
                          
                0000          .if (colorSelect = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (colorSelect = XY & 2 = 2)
                              .endif
                          
                0000          .if (colorSelect = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & colorSelect != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & colorSelect != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & colorSelect != AX )
                              .endif
                          
                          
  318                             MOVE.w #cramArray, <A0
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & <A0 != AX)
       01:C08C  A9 7F         lda #low(#cramArray)
       01:C08E  85 12         sta <A0
       01:C090  A9 27         lda #high(#cramArray)
       01:C092  85 13         sta <A0 + 1
                              .endif
                          
                0000          .if (<A0 = AX & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (<A0 = AY & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (<A0 = XY & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & <A0 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & <A0 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & <A0 != AX )
                              .endif
                          
                          
  319                     
  320                             ;................................
  321                             ; Wait until the active dispay starts
  322  01:C094            .activeDisplay
  323                     
  324                     
  325  01:C094  A5 5A             lda <RCRline+1
  326  01:C096  D0 FC           bne .activeDisplay
  327  01:C098  A5 59             lda <RCRline
  328  01:C09A  C9 64             cmp #100
  329  01:C09C  90 F6           bcc .activeDisplay
  330                     
  331                             ;................................
  332                             ; Delay inside the displayable area
  333  01:C09E  A0 0C             ldy #12
  334  01:C0A0            .delay
  335  01:C0A0  48                pha
  336  01:C0A1  68                pla
  337  01:C0A2  48                pha
  338  01:C0A3  68                pla
  339  01:C0A4  88                dey
  340  01:C0A5  D0 F9           bne .delay
  341                     
  342                             ;................................
  343                             ; Save internal YUV value
  344  01:C0A7  AD 04 04          lda $404
  345  01:C0AA  92 12             sta [A0]
  346                             INC.w <A0
       01:C0AC  E6 12                 inc <A0
       01:C0AE  D0 02                 bne .x_00065
       01:C0B0  E6 13                 inc <A0 + 1
       01:C0B2            .x_00065
  347                             INC.w colorSelect
       01:C0B2  EE 83 2B              inc colorSelect
       01:C0B5  D0 03                 bne .x_00066
       01:C0B7  EE 84 2B              inc colorSelect + 1
       01:C0BA            .x_00066
  348  01:C0BA  AD 84 2B          lda colorSelect+1
  349  01:C0BD  C9 02             cmp #$02
  350  01:C0BF  B0 28           bcs .done
  351                     
  352                             ;................................
  353                             ; Set next color, but also reset pointer to sprite border color
  354                             MOVE.w #$100, $402
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & $402 != AX)
       01:C0C1  A9 00         lda #low(#$100)
       01:C0C3  8D 02 04      sta $402
       01:C0C6  A9 01         lda #high(#$100)
       01:C0C8  8D 03 04      sta $402 + 1
                              .endif
                          
                0000          .if ($402 = AX & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = AY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = XY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & $402 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & $402 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & $402 != AX )
                              .endif
                          
                          
  355                             MOVE.w colorSelect, $404
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & $404 != AX)
                              .endif
                          
                0000          .if ($404 = AX & 6 = 2)
                              .endif
                          
                0000          .if ($404 = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if ($404 = AY & 6 = 2)
                              .endif
                          
                0000          .if ($404 = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if ($404 = XY & 6 = 2)
                              .endif
                          
                0000          .if ($404 = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & $404 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & $404 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & $404 != AX )
       01:C0CB  AD 83 2B      lda colorSelect
       01:C0CE  8D 04 04      sta $404
       01:C0D1  AD 84 2B      lda colorSelect + 1
       01:C0D4  8D 05 04      sta $404 + 1
                              .endif
                          
                          
  356                             MOVE.w #$100, $402
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & $402 != AX)
       01:C0D7  A9 00         lda #low(#$100)
       01:C0D9  8D 02 04      sta $402
       01:C0DC  A9 01         lda #high(#$100)
       01:C0DE  8D 03 04      sta $402 + 1
                              .endif
                          
                0000          .if ($402 = AX & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = AY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = XY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & $402 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & $402 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & $402 != AX )
                              .endif
                          
                          
  357                             WAITVBLANK
                0001              .if (0=0)
       01:C0E1  A2 01                 ldx #1
                                  .endif
                          
                0000              .if (0>0)
                                  .endif
                          
                          
       01:C0E3  20 26 E2          jsr __wait_vblank
  358                     
  359  01:C0E6  4C 94 C0        jmp .activeDisplay
  360                     
  361  01:C0E9            .done
  362                     
  363                             ;................................
  364                             ; Set the border color back to black and turn on BG
  365                             MOVE.w #$100, $402
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & $402 != AX)
       01:C0E9  A9 00         lda #low(#$100)
       01:C0EB  8D 02 04      sta $402
       01:C0EE  A9 01         lda #high(#$100)
       01:C0F0  8D 03 04      sta $402 + 1
                              .endif
                          
                0000          .if ($402 = AX & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = AY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($402 = XY & 2 = 2)
                              .endif
                          
                0000          .if ($402 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & $402 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & $402 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & $402 != AX )
                              .endif
                          
                          
  366                             MOVE.w #$00, $404
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & $404 != AX)
       01:C0F3  A9 00         lda #low(#$00)
       01:C0F5  8D 04 04      sta $404
       01:C0F8  A9 00         lda #high(#$00)
       01:C0FA  8D 05 04      sta $404 + 1
                              .endif
                          
                0000          .if ($404 = AX & 2 = 2)
                              .endif
                          
                0000          .if ($404 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($404 = AY & 2 = 2)
                              .endif
                          
                0000          .if ($404 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if ($404 = XY & 2 = 2)
                              .endif
                          
                0000          .if ($404 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & $404 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & $404 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & $404 != AX )
                              .endif
                          
                          
  367                             VDC.reg CR , #(BG_ON|SPR_OFF|VINT_ON|HINT_ON)
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C0FD  03 05         st0 #CR
       01:C0FF  13 8C         st1 #LOW(#(BG_ON|SPR_OFF|VINT_ON|HINT_ON))
       01:C101  23 00         st2 #HIGH(#(BG_ON|SPR_OFF|VINT_ON|HINT_ON))
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  368                     
  369                             ;................................
  370                             ; Sort through values and write to BAT
  371  01:C103            ShowColorValues:
  372                     
  373                             MOVE.b #$00, col
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C103  A9 00         lda #$00
       01:C105  8D 80 2B      sta col
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta col
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx col
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty col
                          ;        .endif
                          ;    .endif
                          
  374                             MOVE.b #$00, row
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C108  A9 00         lda #$00
       01:C10A  8D 7F 2B      sta row
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta row
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx row
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty row
                          ;        .endif
                          ;    .endif
                          
  375                             MOVE.b #$00, cntr0
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C10D  A9 00         lda #$00
       01:C10F  8D 81 2B      sta cntr0
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta cntr0
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx cntr0
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty cntr0
                          ;        .endif
                          ;    .endif
                          
  376                             MOVE.w #cramArray, <A0
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & <A0 != AX)
       01:C112  A9 7F         lda #low(#cramArray)
       01:C114  85 12         sta <A0
       01:C116  A9 27         lda #high(#cramArray)
       01:C118  85 13         sta <A0 + 1
                              .endif
                          
                0000          .if (<A0 = AX & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (<A0 = AY & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (<A0 = XY & 2 = 2)
                              .endif
                          
                0000          .if (<A0 = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & <A0 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & <A0 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & <A0 != AX )
                              .endif
                          
                          
  377  01:C11A  C2                cly
  378                     
  379  01:C11B            .loop_row
  380                             MOVE.b #$00, col
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C11B  A9 00         lda #$00
       01:C11D  8D 80 2B      sta col
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta col
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx col
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty col
                          ;        .endif
                          ;    .endif
                          
  381                             MOVE.b #$00, cntr1
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C120  A9 00         lda #$00
       01:C122  8D 82 2B      sta cntr1
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta cntr1
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx cntr1
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty cntr1
                          ;        .endif
                          ;    .endif
                          
  382                             MOVE.b #$00, pal_color0
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C125  A9 00         lda #$00
       01:C127  8D 00 22      sta pal_color0
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta pal_color0
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx pal_color0
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty pal_color0
                          ;        .endif
                          ;    .endif
                          
  383                             MOVE.b #$00, pal_color1
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C12A  A9 00         lda #$00
       01:C12C  8D 01 22      sta pal_color1
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta pal_color1
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx pal_color1
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty pal_color1
                          ;        .endif
                          ;    .endif
                          
  384  01:C12F            .loop_col
  385  01:C12F  AD 82 2B          lda cntr1
  386  01:C132  8D 00 22          sta pal_color0
  387  01:C135  8D 01 22          sta pal_color1
  388                     
  389  01:C138  B2 12             lda [A0]
  390  01:C13A  A8                tay
  391                             PRINT_BYTEhex_XY col,row
                          
       01:C13B  AD 7F 2B      lda row
       01:C13E  82            clx
       01:C13F  4A            lsr a
       01:C140  22            sax
       01:C141  6A            ror a
       01:C142  22            sax
       01:C143  4A            lsr a
       01:C144  22            sax
       01:C145  6A            ror a
       01:C146  18            clc
       01:C147  6D 80 2B      adc col
       01:C14A  18                clc
       01:C14B  20 B8 E0          jsr PrintByte
  392                     
  393                             INC.w <A0
       01:C14E  E6 12                 inc <A0
       01:C150  D0 02                 bne .x_00083
       01:C152  E6 13                 inc <A0 + 1
       01:C154            .x_00083
  394                             ADD.w #$02, col
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C154  A9 02                 lda #low(#$02)
       01:C156  18                    clc
       01:C157  6D 80 2B              adc col
       01:C15A  8D 80 2B              sta col
                                      ;bcc .skip00084
       01:C15D  A9 00                 lda #high(#$02)
       01:C15F  6D 81 2B              adc col + 1
       01:C162  8D 81 2B              sta col + 1
       01:C165            .skip00084
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  395                     
  396                             ; Swap the palette for the next byte value
  397  01:C165  AD 82 2B          lda cntr1
  398  01:C168  49 10             eor #$10
  399  01:C16A  8D 82 2B          sta cntr1
  400                     
  401  01:C16D  AD 80 2B          lda col
  402  01:C170  C9 20             cmp #32
  403  01:C172  90 BB           bcc .loop_col
  404  01:C174  EE 7F 2B          inc row
  405  01:C177  AD 7F 2B          lda row
  406  01:C17A  C9 20             cmp #32
  407  01:C17C  B0 03           bcs main_loop
  408  01:C17E  4C 1B C1        jmp .loop_row
  409                     
  410                     
  411  01:C181            main_loop:
  412                     
  413                             WAITVBLANK
                0001              .if (0=0)
       01:C181  A2 01                 ldx #1
                                  .endif
                          
                0000              .if (0>0)
                                  .endif
                          
                          
       01:C183  20 26 E2          jsr __wait_vblank
  414                     
  415  01:C186  4C 81 C1        jmp main_loop
  416                     
  417                     
  418                     
  419                     ;Main end
  420                     ;//...................................................................
  421                     
  422                     
  423                     
  424                     ;/////////////////////////////////////////////////////////////////////////////////
  425                     ;/////////////////////////////////////////////////////////////////////////////////
  426                     ;/////////////////////////////////////////////////////////////////////////////////
  427                     ;
  428                     
  429                     ;....................................
  430           C189          .code
  431           0002          .bank $02, "Subcode 1"
  432           8000          .org $8000
  433                     ;....................................
  434                     
  435                     
  436                       IncludeBinary Font.cell, "../base_func/video/print/font.dat"
                          
       02:8000            start_00086:
       02:8000            Font.cell: .incbin "../base_func/video/print/font.dat"
       02:8C00            end_00086:
                          
                0C00      Font.cell.size = sizeof(Font.cell)
                          
  437                     
  438  02:8C00  00 00 00  Font.pal: .db $00,$00,$00,$00,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01
       02:8C03  00 FF 01  
       02:8C06  FF 01 FF  
       02:8C09  01 FF 01  
       02:8C0C  FF 01 FF  
       02:8C0F  01        
  439           0010      Font.pal.size = sizeof(Font.pal)
  440                     
  441  02:8C10  00 00 00  debug.pal: .db $00,$00,$00,$00,$66,$01,$66,$01,$66,$01,$66,$01,$66,$01,$66,$01
       02:8C13  00 66 01  
       02:8C16  66 01 66  
       02:8C19  01 66 01  
       02:8C1C  66 01 66  
       02:8C1F  01        
  442  02:8C20  00 00 33             .db $00,$00,$33,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$f6,$01
       02:8C23  01 FF 01  
       02:8C26  FF 01 FF  
       02:8C29  01 FF 01  
       02:8C2C  FF 01 F6  
       02:8C2F  01        
  443           0020      debug.pal.size = sizeof(debug.pal)
  444                     
  445                     
  446                         ;// Support files for MAIN
#[2]   ../base_func/init/InitHW.asm
  447                         .include "../base_func/init/InitHW.asm"
    1                     
    2                     ;...................................
    3  02:8C30            init_audio
    4  02:8C30  A2 05     				ldx #$05
    5  02:8C32            .loop
    6  02:8C32  8E 00 08  				stx $800
    7  02:8C35  9C 01 08  				stz $801
    8  02:8C38  9C 02 08  				stz $802
    9  02:8C3B  9C 03 08  				stz $803
   10  02:8C3E  9C 04 08  				stz $804
   11  02:8C41  9C 05 08  				stz $805
   12  02:8C44  9C 06 08  				stz $806
   13  02:8C47  9C 07 08  				stz $807
   14  02:8C4A  9C 08 08  				stz $808
   15  02:8C4D  9C 09 08  				stz $809
   16  02:8C50  CA        				dex
   17  02:8C51  10 DF     			bpl .loop
   18  02:8C53  60        	rts
   19                     	
   20                     ;...................................
   21  02:8C54            init_video
   22                     				
   23  02:8C54  82        				clx
   24  02:8C55  A0 80     				ldy #$80
   25  02:8C57  03 00     				st0 #$00
   26  02:8C59  13 00     				st1 #$00
   27  02:8C5B  23 00     				st2 #$00
   28  02:8C5D  03 02     				st0 #$02
   29                     				
   30  02:8C5F            .loop
   31  02:8C5F  13 00     				st1 #$00
   32  02:8C61  23 00     				st2 #$00
   33  02:8C63  CA        				dex
   34  02:8C64  D0 F9     			bne .loop
   35  02:8C66  88        				dey
   36  02:8C67  D0 F6     			bne .loop
   37                     		
   38  02:8C69  82        				clx
   39  02:8C6A  9C 02 04  				stz $402
   40  02:8C6D  9C 03 04  				stz $403
   41  02:8C70            .loop1
   42  02:8C70  9C 04 04  				stz $404
   43  02:8C73  9C 05 04  				stz $405
   44  02:8C76  E8        				inx
   45  02:8C77  D0 F7     			bne .loop1
   46                     		
   47  02:8C79  60        	rts
   48                     
   49                     
#[1]   vce_dump.asm
  448                     
  449                     
  450                     ;..............................................................................................................
  451                     ;..............................................................................................................
  452                     ;..............................................................................................................
  453                     ;..............................................................................................................
  454                     ;Bank 1 end
  455                     
  456                     
  457                     ;/////////////////////////////////////////////////////////////////////////////////
  458                     ;/////////////////////////////////////////////////////////////////////////////////
  459                     ;/////////////////////////////////////////////////////////////////////////////////
  460                     ;
  461                     ;// Data/Code
  462                     
  463                     
  464                     ;/////////////////////////////////////////////////////////////////////////////////
  465                     ;
  466                     
  467                     
  468                     ;....................................
  469                         ;Pad the Rom
  470           003F          .bank $3f, "PAD"
  471                     ;....................................
  472                     
  473                     
  474                     ;END OF FILE
